import { EthMethod } from 'eth-provider-types';
import { createAsyncMiddleware } from 'json-rpc-engine';
import { BITSKI_RPC_BASE_URL } from '../constants';
import { getRequestContext } from '../utils/request-context';
import { fetchJsonRpcWithRetry } from '../utils/fetch';
const REFRESH = Symbol();
const ANON_USER = 'anonymous';
// We fetch accounts directly in this middleware so that we ensure we're always
// hitting Bitski direcly and not another RPC url (e.g. for custom RPCs/chains).
const fetchAccounts = async (req, config) => {
    const headers = Object.assign({}, config.additionalHeaders);
    if (config.getAccessToken) {
        headers['Authorization'] = `Bearer ${await config.getAccessToken()}`;
    }
    return (await fetchJsonRpcWithRetry(config.fetch, 5, `${BITSKI_RPC_BASE_URL}/mainnet`, {
        method: 'POST',
        headers,
        body: {
            id: req.id,
            jsonrpc: req.jsonrpc,
            method: EthMethod.eth_accounts,
            params: req.params,
        },
    }));
};
export const createEthAccountsMiddleware = () => {
    const cache = new Map();
    return createAsyncMiddleware(async (req, res, next) => {
        var _a, _b;
        if (req.method !== EthMethod.eth_accounts && req.method !== EthMethod.eth_requestAccounts) {
            return next();
        }
        const { config } = getRequestContext(req);
        const user = await ((_a = config.getUser) === null || _a === void 0 ? void 0 : _a.call(config));
        const userId = (_b = user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : ANON_USER;
        let accounts = cache.get(userId);
        if (!accounts || accounts === REFRESH) {
            if (!accounts && (user === null || user === void 0 ? void 0 : user.accounts)) {
                accounts = user.accounts;
            }
            else {
                accounts = await fetchAccounts(req, config);
            }
            cache.set(userId, accounts);
            setTimeout(() => cache.set(userId, REFRESH), 5 * 60 * 1000);
        }
        res.result = accounts;
    });
};
