import createSubscriptionManager from 'eth-json-rpc-filters/subscriptionManager';
import { createLegacyMiddleware } from '../utils/legacy-middleware';
import { EthEvent, EthProviderMessageType } from 'eth-provider-types';
export const createSubscriptionMiddleware = () => createLegacyMiddleware(({ blockTracker, provider, context }) => {
    const manager = createSubscriptionManager({ blockTracker, provider });
    manager.events.on('notification', (notification) => {
        const data = Object.assign(Object.assign({}, notification.params), { subscription: `${context.chain.chainId}:${notification.params.subscription}` });
        context.emit(EthEvent.message, {
            type: EthProviderMessageType.eth_subscription,
            data,
        });
        context.emit(EthEvent.data, null, { params: data });
    });
    context.addDestructor(manager.middleware.destroy);
    return manager.middleware;
});
