import { EthMethod } from 'eth-provider-types';
import { createAsyncMiddleware } from 'json-rpc-engine';
import { getRequestContext } from '../utils/request-context';
import { fetchJsonWithRetry } from '../utils/fetch';
const MATCHING_METHODS = [
    EthMethod.eth_getBlockByNumber,
    EthMethod.eth_blockNumber,
    EthMethod.net_version,
    EthMethod.eth_getLogs,
];
export const createFetchRestMiddleware = () => {
    return createAsyncMiddleware(async (req, res, next) => {
        var _a, _b;
        if (!MATCHING_METHODS.includes(req.method)) {
            return next();
        }
        const { config, chain } = getRequestContext(req);
        const query = ((_b = (_a = req.params) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0
            ? `?params=${encodeURIComponent(JSON.stringify(req.params))}`
            : '';
        const url = `${chain.rpcUrls[0]}/${req.method}${query}`;
        const headers = Object.assign({}, config.additionalHeaders);
        res.result = fetchJsonWithRetry(config.fetch, 5, url, {
            method: 'GET',
            headers,
            credentials: 'omit',
        });
    });
};
