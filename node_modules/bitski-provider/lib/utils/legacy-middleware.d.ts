import { EthMethod } from 'eth-provider-types';
import { JsonRpcMiddleware, JsonRpcRequest } from 'json-rpc-engine';
import { RequestContext } from '../types';
import { PollingBlockTracker } from 'eth-block-tracker';
export default class LegacyMiddlewareProvider {
    private context;
    blockTracker: PollingBlockTracker;
    constructor(context: RequestContext);
    sendAsync<T extends EthMethod>(request: JsonRpcRequest<unknown[]> & {
        skipCache: boolean;
    }, callback: (err: unknown, result?: unknown) => void): void;
}
export declare const clearLegacyProviders: () => void;
export declare const getLegacyMiddlewareProviderFor: (context: RequestContext) => LegacyMiddlewareProvider;
export declare const createLegacyMiddleware: (createMiddleware: (params: {
    blockTracker: PollingBlockTracker;
    provider: LegacyMiddlewareProvider;
    context: RequestContext;
}) => JsonRpcMiddleware<any, any>) => JsonRpcMiddleware<unknown[], unknown>;
