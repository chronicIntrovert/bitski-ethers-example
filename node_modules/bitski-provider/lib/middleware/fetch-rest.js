"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFetchRestMiddleware = void 0;
const eth_provider_types_1 = require("eth-provider-types");
const json_rpc_engine_1 = require("json-rpc-engine");
const request_context_1 = require("../utils/request-context");
const fetch_1 = require("../utils/fetch");
const MATCHING_METHODS = [
    eth_provider_types_1.EthMethod.eth_getBlockByNumber,
    eth_provider_types_1.EthMethod.eth_blockNumber,
    eth_provider_types_1.EthMethod.net_version,
    eth_provider_types_1.EthMethod.eth_getLogs,
];
const createFetchRestMiddleware = () => {
    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, res, next) => {
        var _a, _b;
        if (!MATCHING_METHODS.includes(req.method)) {
            return next();
        }
        const { config, chain } = (0, request_context_1.getRequestContext)(req);
        const query = ((_b = (_a = req.params) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0
            ? `?params=${encodeURIComponent(JSON.stringify(req.params))}`
            : '';
        const url = `${chain.rpcUrls[0]}/${req.method}${query}`;
        const headers = Object.assign({}, config.additionalHeaders);
        res.result = (0, fetch_1.fetchJsonWithRetry)(config.fetch, 5, url, {
            method: 'GET',
            headers,
            credentials: 'omit',
        });
    });
};
exports.createFetchRestMiddleware = createFetchRestMiddleware;
//# sourceMappingURL=fetch-rest.js.map