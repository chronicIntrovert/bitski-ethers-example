"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createChainManagementMiddleware = void 0;
const eth_provider_types_1 = require("eth-provider-types");
const eth_rpc_errors_1 = require("eth-rpc-errors");
const json_rpc_engine_1 = require("json-rpc-engine");
const request_context_1 = require("../utils/request-context");
const type_utils_1 = require("../utils/type-utils");
const createChainManagementMiddleware = () => {
    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, res, next) => {
        var _a, _b;
        const { method } = req;
        const context = (0, request_context_1.getRequestContext)(req);
        if (method === eth_provider_types_1.EthMethod.eth_chainId) {
            res.result = context.chain.chainId;
            return;
        }
        if (method === eth_provider_types_1.EthMethod.wallet_addEthereumChain) {
            const definition = (0, type_utils_1.expect)((_a = req.params) === null || _a === void 0 ? void 0 : _a[0], 'addEthereumChain requires a chain definition parameter');
            await context.store.addChain(definition);
            res.result = null;
            return;
        }
        if (method === eth_provider_types_1.EthMethod.wallet_switchEthereumChain) {
            const chainDetails = (0, type_utils_1.expect)((_b = req.params) === null || _b === void 0 ? void 0 : _b[0], 'switchEthereumChain requires a chainId');
            const chain = await context.store.findChain(chainDetails.chainId);
            if (!chain) {
                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest({ message: 'Chain does not exist' });
            }
            await context.store.setCurrentChainId(chainDetails.chainId);
            context.emit(eth_provider_types_1.EthEvent.chainChanged, chainDetails.chainId);
            res.result = null;
            return;
        }
        return next();
    });
};
exports.createChainManagementMiddleware = createChainManagementMiddleware;
//# sourceMappingURL=chain-management.js.map