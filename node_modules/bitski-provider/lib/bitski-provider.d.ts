import { EthEvent, EthEventListener, EthMethod, EthProvider, EthRequest, EthResult } from 'eth-provider-types';
import { BitskiProviderConfig } from './types';
export declare class BitskiProvider<Extra = unknown> implements EthProvider {
    private engine;
    private events;
    private destructors;
    private requestId;
    private store;
    private config;
    private didEmitConnect;
    private activeSubs;
    constructor(config: BitskiProviderConfig<Extra>);
    requestWithExtra<T extends EthMethod>(request: EthRequest<T>, extra?: Extra): EthResult<T>;
    request<T extends EthMethod>(request: EthRequest<T>): EthResult<T>;
    supportsSubscriptions(): boolean;
    isConnected(): boolean;
    on<T extends EthEvent>(eventName: T, listener: EthEventListener<T>): void;
    removeListener<T extends EthEvent>(eventName: T, listener: EthEventListener<T>): void;
    destroy(): void;
    private requestWithChain;
}
export declare const createBitskiProvider: <Extra = unknown>(config: BitskiProviderConfig<Extra>) => BitskiProvider<Extra>;
