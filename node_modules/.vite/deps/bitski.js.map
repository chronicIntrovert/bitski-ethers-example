{
  "version": 3,
  "sources": ["../../eth-provider-types/index.ts", "../../base64-js/index.js", "../../@openid/appauth/src/errors.ts", "../../@openid/appauth/src/crypto_utils.ts", "../../@openid/appauth/src/flags.ts", "../../@openid/appauth/src/logger.ts", "../../@openid/appauth/src/authorization_request.ts", "../../@openid/appauth/src/authorization_request_handler.ts", "../../@openid/appauth/src/authorization_response.ts", "../../@openid/appauth/src/xhr.ts", "../../@openid/appauth/src/authorization_service_configuration.ts", "../../@openid/appauth/src/query_string_utils.ts", "../../@openid/appauth/src/storage.ts", "../../@openid/appauth/src/redirect_based_handler.ts", "../../@openid/appauth/src/revoke_token_request.ts", "../../@openid/appauth/src/token_request.ts", "../../@openid/appauth/src/token_response.ts", "../../@openid/appauth/src/token_request_handler.ts", "../../@openid/appauth/src/index.ts", "../../bitski/dist/esm/-private/utils/callback.js", "../../bitski/dist/esm/load.js", "../../bitski/dist/esm/provider-shim.js", "../../bitski/dist/esm/-private/utils/numbers.js", "../../bitski/dist/esm/-private/auth/oauth-manager.js", "../../bitski/dist/esm/-private/constants.js", "../../bitski/dist/esm/-private/utils/no-hash-query-string-utils.js", "../../bitski/dist/esm/-private/auth/popup-handler.js", "../../bitski/dist/esm/-private/components/connect-button.js", "../../bitski/dist/esm/-private/network.js", "../../bitski/dist/esm/index.js"],
  "sourcesContent": [null, "'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents the AppAuthError type.\n */\nexport class AppAuthError {\n  constructor(public message: string, public extras?: any) {}\n}\n", "/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as base64 from 'base64-js';\n\nimport {AppAuthError} from './errors';\n\nconst HAS_CRYPTO = typeof window !== 'undefined' && !!(window.crypto as any);\nconst HAS_SUBTLE_CRYPTO = HAS_CRYPTO && !!(window.crypto.subtle as any);\nconst CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\nexport function bufferToString(buffer: Uint8Array) {\n  let state = [];\n  for (let i = 0; i < buffer.byteLength; i += 1) {\n    let index = buffer[i] % CHARSET.length;\n    state.push(CHARSET[index]);\n  }\n  return state.join('');\n}\n\nexport function urlSafe(buffer: Uint8Array): string {\n  const encoded = base64.fromByteArray(new Uint8Array(buffer));\n  return encoded.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\n// adapted from source: http://stackoverflow.com/a/11058858\n// this is used in place of TextEncode as the api is not yet\n// well supported: https://caniuse.com/#search=TextEncoder\nexport function textEncodeLite(str: string) {\n  const buf = new ArrayBuffer(str.length);\n  const bufView = new Uint8Array(buf);\n\n  for (let i = 0; i < str.length; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufView;\n}\n\nexport interface Crypto {\n  /**\n   * Generate a random string\n   */\n  generateRandom(size: number): string;\n  /**\n   * Compute the SHA256 of a given code.\n   * This is useful when using PKCE.\n   */\n  deriveChallenge(code: string): Promise<string>;\n}\n\n/**\n * The default implementation of the `Crypto` interface.\n * This uses the capabilities of the browser.\n */\nexport class DefaultCrypto implements Crypto {\n  generateRandom(size: number) {\n    const buffer = new Uint8Array(size);\n    if (HAS_CRYPTO) {\n      window.crypto.getRandomValues(buffer);\n    } else {\n      // fall back to Math.random() if nothing else is available\n      for (let i = 0; i < size; i += 1) {\n        buffer[i] = (Math.random() * CHARSET.length) | 0;\n      }\n    }\n    return bufferToString(buffer);\n  }\n\n  deriveChallenge(code: string): Promise<string> {\n    if (code.length < 43 || code.length > 128) {\n      return Promise.reject(new AppAuthError('Invalid code length.'));\n    }\n    if (!HAS_SUBTLE_CRYPTO) {\n      return Promise.reject(new AppAuthError('window.crypto.subtle is unavailable.'));\n    }\n\n    return new Promise((resolve, reject) => {\n      crypto.subtle.digest('SHA-256', textEncodeLite(code)).then(buffer => {\n        return resolve(urlSafe(new Uint8Array(buffer)));\n      }, error => reject(error));\n    });\n  }\n}\n", "/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* Global flags that control the behavior of App Auth JS. */\n\n/* Logging turned on ? */\nexport const IS_LOG = true;\n\n/* Profiling turned on ? */\nexport const IS_PROFILE = false;\n", "/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IS_LOG, IS_PROFILE} from './flags';\n\nexport function log(message: string, ...args: any[]) {\n  if (IS_LOG) {\n    let length = args ? args.length : 0;\n    if (length > 0) {\n      console.log(message, ...args);\n    } else {\n      console.log(message);\n    }\n  }\n};\n\n// check to see if native support for profiling is available.\nconst NATIVE_PROFILE_SUPPORT =\n    typeof window !== 'undefined' && !!window.performance && !!console.profile;\n\n/**\n * A decorator that can profile a function.\n */\nexport function profile(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  if (IS_PROFILE) {\n    return performProfile(target, propertyKey, descriptor);\n  } else {\n    // return as-is\n    return descriptor;\n  }\n}\n\nfunction performProfile(\n    target: any, propertyKey: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n  let originalCallable = descriptor.value;\n  // name must exist\n  let name = originalCallable.name;\n  if (!name) {\n    name = 'anonymous function';\n  }\n  if (NATIVE_PROFILE_SUPPORT) {\n    descriptor.value = function(args: any[]) {\n      console.profile(name);\n      let startTime = window.performance.now();\n      let result = originalCallable.call(this || window, ...args);\n      let duration = window.performance.now() - startTime;\n      console.log(`${name} took ${duration} ms`);\n      console.profileEnd();\n      return result;\n    };\n  } else {\n    descriptor.value = function(args: any[]) {\n      log(`Profile start ${name}`);\n      let start = Date.now();\n      let result = originalCallable.call(this || window, ...args);\n      let duration = Date.now() - start;\n      log(`Profile end ${name} took ${duration} ms.`);\n      return result;\n    };\n  }\n  return descriptor;\n}\n", "/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Crypto, DefaultCrypto} from './crypto_utils';\nimport {log} from './logger';\nimport {StringMap} from './types';\n\n/**\n * Represents an AuthorizationRequest as JSON.\n */\nexport interface AuthorizationRequestJson {\n  response_type: string;\n  client_id: string;\n  redirect_uri: string;\n  scope: string;\n  state?: string;\n  extras?: StringMap;\n  internal?: StringMap;\n}\n\n/**\n * Generates a cryptographically random new state. Useful for CSRF protection.\n */\nconst SIZE = 10;  // 10 bytes\nconst newState = function(crypto: Crypto): string {\n  return crypto.generateRandom(SIZE);\n};\n\n/**\n * Represents the AuthorizationRequest.\n * For more information look at\n * https://tools.ietf.org/html/rfc6749#section-4.1.1\n */\nexport class AuthorizationRequest {\n  static RESPONSE_TYPE_TOKEN = 'token';\n  static RESPONSE_TYPE_CODE = 'code';\n\n  // NOTE:\n  // Both redirect_uri and state are actually optional.\n  // However AppAuth is more opionionated, and requires you to use both.\n\n  clientId: string;\n  redirectUri: string;\n  scope: string;\n  responseType: string;\n  state: string;\n  extras?: StringMap;\n  internal?: StringMap;\n  /**\n   * Constructs a new AuthorizationRequest.\n   * Use a `undefined` value for the `state` parameter, to generate a random\n   * state for CSRF protection.\n   */\n  constructor(\n      request: AuthorizationRequestJson,\n      private crypto: Crypto = new DefaultCrypto(),\n      private usePkce: boolean = true) {\n    this.clientId = request.client_id;\n    this.redirectUri = request.redirect_uri;\n    this.scope = request.scope;\n    this.responseType = request.response_type || AuthorizationRequest.RESPONSE_TYPE_CODE;\n    this.state = request.state || newState(crypto);\n    this.extras = request.extras;\n    // read internal properties if available\n    this.internal = request.internal;\n  }\n\n  setupCodeVerifier(): Promise<void> {\n    if (!this.usePkce) {\n      return Promise.resolve();\n    } else {\n      const codeVerifier = this.crypto.generateRandom(128);\n      const challenge: Promise<string|undefined> =\n          this.crypto.deriveChallenge(codeVerifier).catch(error => {\n            log('Unable to generate PKCE challenge. Not using PKCE', error);\n            return undefined;\n          });\n      return challenge.then(result => {\n        if (result) {\n          // keep track of the code used.\n          this.internal = this.internal || {};\n          this.internal['code_verifier'] = codeVerifier;\n          this.extras = this.extras || {};\n          this.extras['code_challenge'] = result;\n          // We always use S256. Plain is not good enough.\n          this.extras['code_challenge_method'] = 'S256';\n        }\n      });\n    }\n  }\n\n  /**\n   * Serializes the AuthorizationRequest to a JavaScript Object.\n   */\n  toJson(): Promise<AuthorizationRequestJson> {\n    // Always make sure that the code verifier is setup when toJson() is called.\n    return this.setupCodeVerifier().then(() => {\n      return {\n        response_type: this.responseType,\n        client_id: this.clientId,\n        redirect_uri: this.redirectUri,\n        scope: this.scope,\n        state: this.state,\n        extras: this.extras,\n        internal: this.internal\n      };\n    });\n  }\n}\n", "/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AuthorizationRequest} from './authorization_request';\nimport {AuthorizationError, AuthorizationResponse} from './authorization_response';\nimport {AuthorizationServiceConfiguration} from './authorization_service_configuration';\nimport {Crypto} from './crypto_utils';\nimport {log} from './logger';\nimport {QueryStringUtils} from './query_string_utils';\nimport {StringMap} from './types';\n\n\n/**\n * This type represents a lambda that can take an AuthorizationRequest,\n * and an AuthorizationResponse as arguments.\n */\nexport type AuthorizationListener =\n    (request: AuthorizationRequest,\n     response: AuthorizationResponse|null,\n     error: AuthorizationError|null) => void;\n\n/**\n * Represents a structural type holding both authorization request and response.\n */\nexport interface AuthorizationRequestResponse {\n  request: AuthorizationRequest;\n  response: AuthorizationResponse|null;\n  error: AuthorizationError|null;\n}\n\n/**\n * Authorization Service notifier.\n * This manages the communication of the AuthorizationResponse to the 3p client.\n */\nexport class AuthorizationNotifier {\n  private listener: AuthorizationListener|null = null;\n\n  setAuthorizationListener(listener: AuthorizationListener) {\n    this.listener = listener;\n  }\n\n  /**\n   * The authorization complete callback.\n   */\n  onAuthorizationComplete(\n      request: AuthorizationRequest,\n      response: AuthorizationResponse|null,\n      error: AuthorizationError|null): void {\n    if (this.listener) {\n      // complete authorization request\n      this.listener(request, response, error);\n    }\n  }\n}\n\n// TODO(rahulrav@): add more built in parameters.\n/* built in parameters. */\nexport const BUILT_IN_PARAMETERS = ['redirect_uri', 'client_id', 'response_type', 'state', 'scope'];\n\n/**\n * Defines the interface which is capable of handling an authorization request\n * using various methods (iframe / popup / different process etc.).\n */\nexport abstract class AuthorizationRequestHandler {\n  constructor(public utils: QueryStringUtils, protected crypto: Crypto) {}\n\n  // notifier send the response back to the client.\n  protected notifier: AuthorizationNotifier|null = null;\n\n  /**\n   * A utility method to be able to build the authorization request URL.\n   */\n  protected buildRequestUrl(\n      configuration: AuthorizationServiceConfiguration,\n      request: AuthorizationRequest) {\n    // build the query string\n    // coerce to any type for convenience\n    let requestMap: StringMap = {\n      'redirect_uri': request.redirectUri,\n      'client_id': request.clientId,\n      'response_type': request.responseType,\n      'state': request.state,\n      'scope': request.scope\n    };\n\n    // copy over extras\n    if (request.extras) {\n      for (let extra in request.extras) {\n        if (request.extras.hasOwnProperty(extra)) {\n          // check before inserting to requestMap\n          if (BUILT_IN_PARAMETERS.indexOf(extra) < 0) {\n            requestMap[extra] = request.extras[extra];\n          }\n        }\n      }\n    }\n\n    let query = this.utils.stringify(requestMap);\n    let baseUrl = configuration.authorizationEndpoint;\n    let url = `${baseUrl}?${query}`;\n    return url;\n  }\n\n  /**\n   * Completes the authorization request if necessary & when possible.\n   */\n  completeAuthorizationRequestIfPossible(): Promise<void> {\n    // call complete authorization if possible to see there might\n    // be a response that needs to be delivered.\n    log(`Checking to see if there is an authorization response to be delivered.`);\n    if (!this.notifier) {\n      log(`Notifier is not present on AuthorizationRequest handler.\n          No delivery of result will be possible`)\n    }\n    return this.completeAuthorizationRequest().then(result => {\n      if (!result) {\n        log(`No result is available yet.`);\n      }\n      if (result && this.notifier) {\n        this.notifier.onAuthorizationComplete(result.request, result.response, result.error);\n      }\n    });\n  }\n\n  /**\n   * Sets the default Authorization Service notifier.\n   */\n  setAuthorizationNotifier(notifier: AuthorizationNotifier): AuthorizationRequestHandler {\n    this.notifier = notifier;\n    return this;\n  };\n\n  /**\n   * Makes an authorization request.\n   */\n  abstract performAuthorizationRequest(\n      configuration: AuthorizationServiceConfiguration,\n      request: AuthorizationRequest): void;\n\n  /**\n   * Checks if an authorization flow can be completed, and completes it.\n   * The handler returns a `Promise<AuthorizationRequestResponse>` if ready, or a `Promise<null>`\n   * if not ready.\n   */\n  protected abstract completeAuthorizationRequest(): Promise<AuthorizationRequestResponse|null>;\n}\n", "/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents the AuthorizationResponse as a JSON object.\n */\nexport interface AuthorizationResponseJson {\n  code: string;\n  state: string;\n}\n\n/**\n * Represents the AuthorizationError as a JSON object.\n */\nexport interface AuthorizationErrorJson {\n  error: string;\n  error_description?: string;\n  error_uri?: string;\n  state?: string;\n}\n\n/**\n * Represents the Authorization Response type.\n * For more information look at\n * https://tools.ietf.org/html/rfc6749#section-4.1.2\n */\nexport class AuthorizationResponse {\n  code: string;\n  state: string;\n\n  constructor(response: AuthorizationResponseJson) {\n    this.code = response.code;\n    this.state = response.state;\n  }\n\n  toJson(): AuthorizationResponseJson {\n    return {code: this.code, state: this.state};\n  }\n}\n\n/**\n * Represents the Authorization error response.\n * For more information look at:\n * https://tools.ietf.org/html/rfc6749#section-4.1.2.1\n */\nexport class AuthorizationError {\n  error: string;\n  errorDescription?: string;\n  errorUri?: string;\n  state?: string;\n\n  constructor(error: AuthorizationErrorJson) {\n    this.error = error.error;\n    this.errorDescription = error.error_description;\n    this.errorUri = error.error_uri;\n    this.state = error.state;\n  }\n\n  toJson(): AuthorizationErrorJson {\n    return {\n      error: this.error,\n      error_description: this.errorDescription,\n      error_uri: this.errorUri,\n      state: this.state\n    };\n  }\n}\n", "/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AppAuthError} from './errors';\n\n/**\n * An class that abstracts away the ability to make an XMLHttpRequest.\n */\nexport abstract class Requestor {\n  abstract xhr<T>(settings: JQueryAjaxSettings): Promise<T>;\n}\n\n/**\n * Uses $.ajax to makes the Ajax requests.\n */\nexport class JQueryRequestor extends Requestor {\n  xhr<T>(settings: JQueryAjaxSettings): Promise<T> {\n    // NOTE: using jquery to make XHR's as whatwg-fetch requires\n    // that I target ES6.\n    const xhr = $.ajax(settings);\n    return new Promise<T>((resolve, reject) => {\n      xhr.then(\n          (data, textStatus, jqXhr) => {\n            resolve(data as T);\n          },\n          (jqXhr, textStatus, error) => {\n            reject(new AppAuthError(error));\n          });\n    });\n  }\n}\n\n\n/**\n * Uses fetch API to make Ajax requests\n */\nexport class FetchRequestor extends Requestor {\n  xhr<T>(settings: JQueryAjaxSettings): Promise<T> {\n    if (!settings.url) {\n      return Promise.reject(new AppAuthError('A URL must be provided.'));\n    }\n    let url: URL = new URL(<string>settings.url);\n    let requestInit: RequestInit = {};\n    requestInit.method = settings.method;\n    requestInit.mode = 'cors';\n\n    if (settings.data) {\n      if (settings.method && settings.method.toUpperCase() === 'POST') {\n        requestInit.body = <string>settings.data;\n      } else {\n        let searchParams = new URLSearchParams(settings.data);\n        searchParams.forEach((value, key) => {\n          url.searchParams.append(key, value);\n        });\n      }\n    }\n\n    // Set the request headers\n    requestInit.headers = {};\n    if (settings.headers) {\n      for (let i in settings.headers) {\n        if (settings.headers.hasOwnProperty(i)) {\n          requestInit.headers[i] = <string>settings.headers[i];\n        }\n      }\n    }\n\n    const isJsonDataType = settings.dataType && settings.dataType.toLowerCase() === 'json';\n\n    // Set 'Accept' header value for json requests (Taken from\n    // https://github.com/jquery/jquery/blob/e0d941156900a6bff7c098c8ea7290528e468cf8/src/ajax.js#L644\n    // )\n    if (isJsonDataType) {\n      requestInit.headers['Accept'] = 'application/json, text/javascript, */*; q=0.01';\n    }\n\n    return fetch(url.toString(), requestInit).then(response => {\n      if (response.status >= 200 && response.status < 300) {\n        const contentType = response.headers.get('content-type');\n        if (isJsonDataType || (contentType && contentType.indexOf('application/json') !== -1)) {\n          return response.json();\n        } else {\n          return response.text();\n        }\n      } else {\n        return Promise.reject(new AppAuthError(response.status.toString(), response.statusText));\n      }\n    });\n  }\n}\n\n/**\n * Should be used only in the context of testing. Just uses the underlying\n * Promise to mock the behavior of the Requestor.\n */\nexport class TestRequestor extends Requestor {\n  constructor(public promise: Promise<any>) {\n    super();\n  }\n  xhr<T>(settings: JQueryAjaxSettings): Promise<T> {\n    return this.promise;  // unsafe cast\n  }\n}\n", "/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {JQueryRequestor, Requestor} from './xhr';\n\n\n/**\n * Represents AuthorizationServiceConfiguration as a JSON object.\n */\nexport interface AuthorizationServiceConfigurationJson {\n  authorization_endpoint: string;\n  token_endpoint: string;\n  revocation_endpoint: string;\n  end_session_endpoint?: string;\n  userinfo_endpoint?: string;\n}\n\n/**\n * The standard base path for well-known resources on domains.\n * See https://tools.ietf.org/html/rfc5785 for more information.\n */\nconst WELL_KNOWN_PATH = '.well-known';\n\n/**\n * The standard resource under the well known path at which an OpenID Connect\n * discovery document can be found under an issuer's base URI.\n */\nconst OPENID_CONFIGURATION = 'openid-configuration';\n\n/**\n * Configuration details required to interact with an authorization service.\n *\n * More information at https://openid.net/specs/openid-connect-discovery-1_0-17.html\n */\nexport class AuthorizationServiceConfiguration {\n  authorizationEndpoint: string;\n  tokenEndpoint: string;\n  revocationEndpoint: string;\n  userInfoEndpoint?: string;\n  endSessionEndpoint?: string;\n\n  constructor(request: AuthorizationServiceConfigurationJson) {\n    this.authorizationEndpoint = request.authorization_endpoint;\n    this.tokenEndpoint = request.token_endpoint;\n    this.revocationEndpoint = request.revocation_endpoint;\n    this.userInfoEndpoint = request.userinfo_endpoint;\n    this.endSessionEndpoint = request.end_session_endpoint;\n  }\n\n  toJson() {\n    return {\n      authorization_endpoint: this.authorizationEndpoint,\n      token_endpoint: this.tokenEndpoint,\n      revocation_endpoint: this.revocationEndpoint,\n      end_session_endpoint: this.endSessionEndpoint,\n      userinfo_endpoint: this.userInfoEndpoint\n    };\n  }\n\n  static fetchFromIssuer(openIdIssuerUrl: string, requestor?: Requestor):\n      Promise<AuthorizationServiceConfiguration> {\n    const fullUrl = `${openIdIssuerUrl}/${WELL_KNOWN_PATH}/${OPENID_CONFIGURATION}`;\n\n    const requestorToUse = requestor || new JQueryRequestor();\n\n    return requestorToUse\n        .xhr<AuthorizationServiceConfigurationJson>({url: fullUrl, dataType: 'json', method: 'GET'})\n        .then(json => new AuthorizationServiceConfiguration(json));\n  }\n}\n", "/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {LocationLike, StringMap} from './types';\n\n\n/**\n * Query String Utilities.\n */\nexport interface QueryStringUtils {\n  stringify(input: StringMap): string;\n  parse(query: LocationLike, useHash?: boolean): StringMap;\n  parseQueryString(query: string): StringMap;\n}\n\nexport class BasicQueryStringUtils implements QueryStringUtils {\n  parse(input: LocationLike, useHash?: boolean) {\n    if (useHash) {\n      return this.parseQueryString(input.hash);\n    } else {\n      return this.parseQueryString(input.search);\n    }\n  }\n\n  parseQueryString(query: string): StringMap {\n    let result: StringMap = {};\n    // if anything starts with ?, # or & remove it\n    query = query.trim().replace(/^(\\?|#|&)/, '');\n    let params = query.split('&');\n    for (let i = 0; i < params.length; i += 1) {\n      let param = params[i];  // looks something like a=b\n      let parts = param.split('=');\n      if (parts.length >= 2) {\n        let key = decodeURIComponent(parts.shift()!);\n        let value = parts.length > 0 ? parts.join('=') : null;\n        if (value) {\n          result[key] = decodeURIComponent(value);\n        }\n      }\n    }\n    return result;\n  }\n\n  stringify(input: StringMap) {\n    let encoded: string[] = [];\n    for (let key in input) {\n      if (input.hasOwnProperty(key) && input[key]) {\n        encoded.push(`${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n      }\n    }\n    return encoded.join('&');\n  }\n}\n", "/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A subset of the `Storage` interface which we need for the backends to work.\n *\n * Essentially removes the indexable properties and readonly properties from\n * `Storage` in lib.dom.d.ts. This is so that a custom type can extend it for\n * testing.\n */\nexport interface UnderlyingStorage {\n  readonly length: number;\n  clear(): void;\n  getItem(key: string): string|null;\n  removeItem(key: string): void;\n  setItem(key: string, data: string): void;\n}\n\n/**\n * Asynchronous storage APIs. All methods return a `Promise`.\n * All methods take the `DOMString`\n * IDL type (as it is the lowest common denominator).\n */\nexport abstract class StorageBackend {\n  /**\n   * When passed a key `name`, will return that key's value.\n   */\n  public abstract getItem(name: string): Promise<string|null>;\n\n  /**\n   * When passed a key `name`, will remove that key from the storage.\n   */\n  public abstract removeItem(name: string): Promise<void>;\n\n  /**\n   * When invoked, will empty all keys out of the storage.\n   */\n  public abstract clear(): Promise<void>;\n\n  /**\n   * The setItem() method of the `StorageBackend` interface,\n   * when passed a key name and value, will add that key to the storage,\n   * or update that key's value if it already exists.\n   */\n  public abstract setItem(name: string, value: string): Promise<void>;\n}\n\n/**\n * A `StorageBackend` backed by `localstorage`.\n */\nexport class LocalStorageBackend extends StorageBackend {\n  private storage: UnderlyingStorage;\n  constructor(storage?: UnderlyingStorage) {\n    super();\n    this.storage = storage || window.localStorage;\n  }\n\n  public getItem(name: string): Promise<string|null> {\n    return new Promise<string|null>((resolve, reject) => {\n      const value = this.storage.getItem(name);\n      if (value) {\n        resolve(value);\n      } else {\n        resolve(null);\n      }\n    });\n  }\n\n  public removeItem(name: string): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.storage.removeItem(name);\n      resolve();\n    });\n  }\n\n  public clear(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.storage.clear();\n      resolve();\n    });\n  }\n\n  public setItem(name: string, value: string): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.storage.setItem(name, value);\n      resolve();\n    });\n  }\n}\n", "/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AuthorizationRequest} from './authorization_request';\nimport {AuthorizationRequestHandler, AuthorizationRequestResponse} from './authorization_request_handler';\nimport {AuthorizationError, AuthorizationResponse} from './authorization_response'\nimport {AuthorizationServiceConfiguration} from './authorization_service_configuration';\nimport {Crypto, DefaultCrypto} from './crypto_utils';\nimport {log} from './logger';\nimport {BasicQueryStringUtils} from './query_string_utils';\nimport {LocalStorageBackend, StorageBackend} from './storage';\nimport {LocationLike} from './types';\n\n\n/** key for authorization request. */\nconst authorizationRequestKey =\n    (handle: string) => {\n      return `${handle}_appauth_authorization_request`;\n    }\n\n/** key for authorization service configuration */\nconst authorizationServiceConfigurationKey =\n    (handle: string) => {\n      return `${handle}_appauth_authorization_service_configuration`;\n    }\n\n/** key in local storage which represents the current authorization request. */\nconst AUTHORIZATION_REQUEST_HANDLE_KEY = 'appauth_current_authorization_request';\n\n/**\n * Represents an AuthorizationRequestHandler which uses a standard\n * redirect based code flow.\n */\nexport class RedirectRequestHandler extends AuthorizationRequestHandler {\n  constructor(\n      // use the provided storage backend\n      // or initialize local storage with the default storage backend which\n      // uses window.localStorage\n      public storageBackend: StorageBackend = new LocalStorageBackend(),\n      utils = new BasicQueryStringUtils(),\n      public locationLike: LocationLike = window.location,\n      crypto: Crypto = new DefaultCrypto()) {\n    super(utils, crypto);\n  }\n\n  performAuthorizationRequest(\n      configuration: AuthorizationServiceConfiguration,\n      request: AuthorizationRequest) {\n    const handle = this.crypto.generateRandom(10);\n\n    // before you make request, persist all request related data in local storage.\n    const persisted = Promise.all([\n      this.storageBackend.setItem(AUTHORIZATION_REQUEST_HANDLE_KEY, handle),\n      // Calling toJson() adds in the code & challenge when possible\n      request.toJson().then(\n          result =>\n              this.storageBackend.setItem(authorizationRequestKey(handle), JSON.stringify(result))),\n      this.storageBackend.setItem(\n          authorizationServiceConfigurationKey(handle), JSON.stringify(configuration.toJson())),\n    ]);\n\n    persisted.then(() => {\n      // make the redirect request\n      let url = this.buildRequestUrl(configuration, request);\n      log('Making a request to ', request, url);\n      this.locationLike.assign(url);\n    });\n  }\n\n  /**\n   * Attempts to introspect the contents of storage backend and completes the\n   * request.\n   */\n  protected completeAuthorizationRequest(): Promise<AuthorizationRequestResponse|null> {\n    // TODO(rahulrav@): handle authorization errors.\n    return this.storageBackend.getItem(AUTHORIZATION_REQUEST_HANDLE_KEY).then(handle => {\n      if (handle) {\n        // we have a pending request.\n        // fetch authorization request, and check state\n        return this.storageBackend\n            .getItem(authorizationRequestKey(handle))\n            // requires a corresponding instance of result\n            // TODO(rahulrav@): check for inconsitent state here\n            .then(result => JSON.parse(result!))\n            .then(json => new AuthorizationRequest(json))\n            .then(request => {\n              // check redirect_uri and state\n              let currentUri = `${this.locationLike.origin}${this.locationLike.pathname}`;\n              let queryParams = this.utils.parse(this.locationLike, true /* use hash */);\n              let state: string|undefined = queryParams['state'];\n              let code: string|undefined = queryParams['code'];\n              let error: string|undefined = queryParams['error'];\n              log('Potential authorization request ', currentUri, queryParams, state, code, error);\n              let shouldNotify = state === request.state;\n              let authorizationResponse: AuthorizationResponse|null = null;\n              let authorizationError: AuthorizationError|null = null;\n              if (shouldNotify) {\n                if (error) {\n                  // get additional optional info.\n                  let errorUri = queryParams['error_uri'];\n                  let errorDescription = queryParams['error_description'];\n                  authorizationError = new AuthorizationError({\n                    error: error,\n                    error_description: errorDescription,\n                    error_uri: errorUri,\n                    state: state\n                  });\n                } else {\n                  authorizationResponse = new AuthorizationResponse({code: code, state: state});\n                }\n                // cleanup state\n                return Promise\n                    .all([\n                      this.storageBackend.removeItem(AUTHORIZATION_REQUEST_HANDLE_KEY),\n                      this.storageBackend.removeItem(authorizationRequestKey(handle)),\n                      this.storageBackend.removeItem(authorizationServiceConfigurationKey(handle))\n                    ])\n                    .then(() => {\n                      log('Delivering authorization response');\n                      return {\n                        request: request,\n                        response: authorizationResponse,\n                        error: authorizationError\n                      } as AuthorizationRequestResponse;\n                    });\n              } else {\n                log('Mismatched request (state and request_uri) dont match.');\n                return Promise.resolve(null);\n              }\n            });\n      } else {\n        return null;\n      }\n    });\n  }\n}\n", "import {StringMap} from './types';\n\n/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Supported token types\n */\nexport type TokenTypeHint = 'refresh_token'|'access_token';\n\n/**\n * Represents the Token Request as JSON.\n */\nexport interface RevokeTokenRequestJson {\n  token: string;\n  token_type_hint?: TokenTypeHint;\n  client_id?: string;\n  client_secret?: string;\n}\n\n/**\n * Represents a revoke token request.\n * For more information look at:\n * https://tools.ietf.org/html/rfc7009#section-2.1\n */\nexport class RevokeTokenRequest {\n  token: string;\n  tokenTypeHint: TokenTypeHint|undefined;\n  clientId: string|undefined;\n  clientSecret: string|undefined;\n\n  constructor(request: RevokeTokenRequestJson) {\n    this.token = request.token;\n    this.tokenTypeHint = request.token_type_hint;\n    this.clientId = request.client_id;\n    this.clientSecret = request.client_secret;\n  }\n\n  /**\n   * Serializes a TokenRequest to a JavaScript object.\n   */\n  toJson(): RevokeTokenRequestJson {\n    let json: RevokeTokenRequestJson = {token: this.token};\n    if (this.tokenTypeHint) {\n      json['token_type_hint'] = this.tokenTypeHint;\n    }\n    if (this.clientId) {\n      json['client_id'] = this.clientId;\n    }\n    if (this.clientSecret) {\n      json['client_secret'] = this.clientSecret;\n    }\n    return json;\n  }\n\n  toStringMap(): StringMap {\n    let json = this.toJson();\n    // :(\n    return (json as any);\n  }\n}\n", "/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {StringMap} from './types';\n\nexport const GRANT_TYPE_AUTHORIZATION_CODE = 'authorization_code';\nexport const GRANT_TYPE_REFRESH_TOKEN = 'refresh_token';\n\n/**\n * Represents the Token Request as JSON.\n */\nexport interface TokenRequestJson {\n  grant_type: string;\n  code?: string;\n  refresh_token?: string, redirect_uri: string;\n  client_id: string;\n  extras?: StringMap;\n}\n\n\n/**\n * Represents an Access Token request.\n * For more information look at:\n * https://tools.ietf.org/html/rfc6749#section-4.1.3\n */\nexport class TokenRequest {\n  clientId: string;\n  redirectUri: string;\n  grantType: string;\n  code: string|undefined;\n  refreshToken: string|undefined;\n  extras: StringMap|undefined\n\n  constructor(request: TokenRequestJson) {\n    this.clientId = request.client_id;\n    this.redirectUri = request.redirect_uri;\n    this.grantType = request.grant_type;\n    this.code = request.code;\n    this.refreshToken = request.refresh_token;\n    this.extras = request.extras;\n  }\n\n  /**\n   * Serializes a TokenRequest to a JavaScript object.\n   */\n  toJson(): TokenRequestJson {\n    return {\n      grant_type: this.grantType,\n      code: this.code,\n      refresh_token: this.refreshToken,\n      redirect_uri: this.redirectUri,\n      client_id: this.clientId,\n      extras: this.extras\n    };\n  }\n\n  toStringMap(): StringMap {\n    let map: StringMap = {\n      grant_type: this.grantType,\n      client_id: this.clientId,\n      redirect_uri: this.redirectUri\n    };\n\n    if (this.code) {\n      map['code'] = this.code;\n    }\n\n    if (this.refreshToken) {\n      map['refresh_token'] = this.refreshToken;\n    }\n\n    // copy over extras\n    if (this.extras) {\n      for (let extra in this.extras) {\n        if (this.extras.hasOwnProperty(extra) && !map.hasOwnProperty(extra)) {\n          // check before inserting to requestMap\n          map[extra] = this.extras[extra];\n        }\n      }\n    }\n    return map;\n  }\n}\n", "/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents the access token types.\n * For more information see:\n * https://tools.ietf.org/html/rfc6749#section-7.1\n */\nexport type TokenType = 'bearer'|'mac';\n\n/**\n * Represents the TokenResponse as a JSON Object.\n */\nexport interface TokenResponseJson {\n  access_token: string;\n  token_type?: TokenType; /* treating token type as optional, as its going to be inferred. */\n  expires_in?: string;    /* lifetime in seconds. */\n  refresh_token?: string;\n  scope?: string;\n  id_token?: string;  /* https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse */\n  issued_at?: number; /* when was it issued ? */\n}\n\n/**\n * Represents the possible error codes from the token endpoint.\n * For more information look at:\n * https://tools.ietf.org/html/rfc6749#section-5.2\n */\nexport type ErrorType = 'invalid_request'|'invalid_client'|'invalid_grant'|'unauthorized_client'|\n    'unsupported_grant_type'|'invalid_scope';\n\n/**\n * Represents the TokenError as a JSON Object.\n */\nexport interface TokenErrorJson {\n  error: ErrorType;\n  error_description?: string;\n  error_uri?: string;\n}\n\n// constants\nconst AUTH_EXPIRY_BUFFER = 10 * 60 * -1;  // 10 mins in seconds\n\n/**\n * Returns the instant of time in seconds.\n */\nexport const nowInSeconds = () => Math.round(new Date().getTime() / 1000);\n\n/**\n * Represents the Token Response type.\n * For more information look at:\n * https://tools.ietf.org/html/rfc6749#section-5.1\n */\nexport class TokenResponse {\n  accessToken: string;\n  tokenType: TokenType;\n  expiresIn: number|undefined;\n  refreshToken: string|undefined;\n  scope: string|undefined;\n  idToken: string|undefined;\n  issuedAt: number;\n\n  constructor(response: TokenResponseJson) {\n    this.accessToken = response.access_token;\n    this.tokenType = response.token_type || 'bearer';\n    if (response.expires_in) {\n      this.expiresIn = parseInt(response.expires_in, 10);\n    }\n    this.refreshToken = response.refresh_token;\n    this.scope = response.scope;\n    this.idToken = response.id_token;\n    this.issuedAt = response.issued_at || nowInSeconds();\n  }\n\n  toJson(): TokenResponseJson {\n    return {\n      access_token: this.accessToken,\n      id_token: this.idToken,\n      refresh_token: this.refreshToken,\n      scope: this.scope,\n      token_type: this.tokenType,\n      issued_at: this.issuedAt,\n      expires_in: this.expiresIn?.toString()\n    };\n  }\n\n  isValid(buffer: number = AUTH_EXPIRY_BUFFER): boolean {\n    if (this.expiresIn) {\n      let now = nowInSeconds();\n      return now < this.issuedAt + this.expiresIn + buffer;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Represents the Token Error type.\n * For more information look at:\n * https://tools.ietf.org/html/rfc6749#section-5.2\n */\nexport class TokenError {\n  error: ErrorType;\n  errorDescription: string|undefined;\n  errorUri: string|undefined;\n\n  constructor(tokenError: TokenErrorJson) {\n    this.error = tokenError.error;\n    this.errorDescription = tokenError.error_description;\n    this.errorUri = tokenError.error_uri;\n  }\n\n  toJson(): TokenErrorJson {\n    return {\n      error: this.error, error_description: this.errorDescription, error_uri: this.errorUri\n    }\n  }\n}\n", "/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AuthorizationServiceConfiguration} from './authorization_service_configuration';\nimport {AppAuthError} from './errors';\nimport {BasicQueryStringUtils, QueryStringUtils} from './query_string_utils';\nimport {RevokeTokenRequest} from './revoke_token_request';\nimport {TokenRequest} from './token_request';\nimport {TokenError, TokenErrorJson, TokenResponse, TokenResponseJson} from './token_response';\nimport {JQueryRequestor, Requestor} from './xhr';\n\n\n/**\n * Represents an interface which can make a token request.\n */\nexport interface TokenRequestHandler {\n  /**\n   * Performs the token request, given the service configuration.\n   */\n  performTokenRequest(configuration: AuthorizationServiceConfiguration, request: TokenRequest):\n      Promise<TokenResponse>;\n\n  performRevokeTokenRequest(\n      configuration: AuthorizationServiceConfiguration,\n      request: RevokeTokenRequest): Promise<boolean>;\n}\n\n/**\n * The default token request handler.\n */\nexport class BaseTokenRequestHandler implements TokenRequestHandler {\n  constructor(\n      public readonly requestor: Requestor = new JQueryRequestor(),\n      public readonly utils: QueryStringUtils = new BasicQueryStringUtils()) {}\n\n  private isTokenResponse(response: TokenResponseJson|\n                          TokenErrorJson): response is TokenResponseJson {\n    return (response as TokenErrorJson).error === undefined;\n  }\n\n  performRevokeTokenRequest(\n      configuration: AuthorizationServiceConfiguration,\n      request: RevokeTokenRequest): Promise<boolean> {\n    let revokeTokenResponse = this.requestor.xhr<boolean>({\n      url: configuration.revocationEndpoint,\n      method: 'POST',\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      data: this.utils.stringify(request.toStringMap())\n    });\n\n    return revokeTokenResponse.then(response => {\n      return true;\n    });\n  }\n\n  performTokenRequest(configuration: AuthorizationServiceConfiguration, request: TokenRequest):\n      Promise<TokenResponse> {\n    let tokenResponse = this.requestor.xhr<TokenResponseJson|TokenErrorJson>({\n      url: configuration.tokenEndpoint,\n      method: 'POST',\n      dataType: 'json',  // adding implicit dataType\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      data: this.utils.stringify(request.toStringMap())\n    });\n\n    return tokenResponse.then(response => {\n      if (this.isTokenResponse(response)) {\n        return new TokenResponse(response);\n      } else {\n        return Promise.reject<TokenResponse>(\n            new AppAuthError(response.error, new TokenError(response)));\n      }\n    });\n  }\n}\n", "export * from './authorization_request';\nexport * from './authorization_request_handler';\nexport * from './authorization_response';\nexport * from './authorization_service_configuration';\nexport * from './crypto_utils';\nexport * from './errors';\nexport * from './flags';\nexport * from './logger';\nexport * from './query_string_utils';\nexport * from './redirect_based_handler';\nexport * from './revoke_token_request';\nexport * from './storage';\nexport * from './token_request';\nexport * from './token_request_handler';\nexport * from './token_response';\nexport * from './types';\nexport * from './xhr';\n", "/**\n * Automatically handles finalizing the oauth sign in process with the Bitski SDK\n */\nexport function processCallback() {\n    if (window.opener) {\n        notifyOpener(window.location);\n    }\n    else {\n        throw new Error('Parent window could not be found');\n    }\n}\n/**\n * Notifies the opener when in a popup\n * @param url the url that contains the query params\n */\nfunction notifyOpener(url) {\n    if (window.opener) {\n        if (url) {\n            // parse url to get state\n            const data = parseUrlParams(url);\n            if (data.state) {\n                const name = `popupCallback_${data.state}`;\n                const callback = window.opener[name];\n                if (callback) {\n                    callback(url);\n                }\n                else {\n                    throw new Error('No callback found on opener');\n                }\n            }\n            else {\n                throw new Error('No state found in response');\n            }\n        }\n    }\n    else {\n        throw new Error('No window.opener');\n    }\n}\n/**\n * Extracts query params from the hash of the url\n * @param url the url to parse\n */\nexport function parseUrlParams(url) {\n    let params;\n    if (url.href.includes('#')) {\n        params = extractQuery(url.hash);\n    }\n    else if (url.href.includes('?')) {\n        params = url.search.split('?').pop();\n    }\n    if (!params) {\n        throw new Error('No params found in result');\n    }\n    return params.split('&').reduce((prev, item) => {\n        const [key, value] = item.split('=');\n        if (key && value) {\n            prev[decodeURIComponent(key)] = decodeURIComponent(value);\n        }\n        return prev;\n    }, {});\n}\nfunction extractQuery(url) {\n    if (!url.includes('#')) {\n        throw new Error('No params found in result');\n    }\n    return url.split('#').pop();\n}\n", "const BITSKI_SDK_URL = 'https://cdn.bitskistatic.com/js/sdk/v3.3/bitski.min.js';\nconst BITSKI_SDK_REGEX = /^https:\\/\\/cdn\\.bitskistatic\\.com\\/js\\/sdk\\/v3.3\\/bitski\\.min\\.js\\/?(\\?.*)?$/;\nexport const findScript = () => {\n    const scripts = document.querySelectorAll(`script[src^=\"${BITSKI_SDK_URL}\"]`);\n    for (let i = 0; i < scripts.length; i++) {\n        const script = scripts[i];\n        if (!BITSKI_SDK_REGEX.test(script.src)) {\n            continue;\n        }\n        return script;\n    }\n    return null;\n};\nconst injectScript = () => {\n    const script = document.createElement('script');\n    script.src = BITSKI_SDK_URL;\n    const headOrBody = document.head || document.body;\n    if (!headOrBody) {\n        throw new Error('Expected document.body not to be null. The Bitski SDK requires a <body> element.');\n    }\n    headOrBody.appendChild(script);\n    return script;\n};\nlet bitskiPromise = null;\nconst windowLoadPromise = new Promise((resolve) => {\n    if (typeof window === 'undefined') {\n        // Resolve to null when imported server side. This makes the module\n        // safe to import in an isomorphic code base.\n        resolve(null);\n        return;\n    }\n    if (window.document.readyState === 'complete') {\n        resolve(null);\n        return;\n    }\n    window.addEventListener('load', () => resolve(null));\n});\nexport const loadScript = () => {\n    // Ensure that we only attempt to load bitski.js at most once\n    if (bitskiPromise !== null) {\n        return bitskiPromise;\n    }\n    bitskiPromise = new Promise((resolve, reject) => {\n        // First check to see if we've already loaded Bitski SDK in somehow\n        // (primarily for tests)\n        if (globalThis.Bitski) {\n            resolve(globalThis.Bitski.BitskiSDK);\n            return;\n        }\n        if (typeof window === 'undefined') {\n            // Resolve to null when imported server side. This makes the module\n            // safe to import in an isomorphic code base.\n            resolve(null);\n            return;\n        }\n        windowLoadPromise.then(() => {\n            if (window.Bitski) {\n                resolve(window.Bitski.BitskiSDK);\n                return;\n            }\n            try {\n                let script = findScript();\n                if (!script) {\n                    script = injectScript();\n                }\n                script.addEventListener('load', () => {\n                    if (window.Bitski) {\n                        resolve(window.Bitski.BitskiSDK);\n                    }\n                    else {\n                        reject(new Error('Bitski SDK not available'));\n                    }\n                });\n                script.addEventListener('error', () => {\n                    reject(new Error('Failed to load Bitski SDK'));\n                });\n            }\n            catch (error) {\n                reject(error);\n                return;\n            }\n        });\n    });\n    return bitskiPromise;\n};\n", "import { EthMethod } from 'eth-provider-types';\nimport { toHex } from './-private/utils/numbers';\n// gotta keep it within MAX_SAFE_INTEGER\nconst extraDigits = 3;\nfunction createRandomId() {\n    // 13 time digits\n    const datePart = new Date().getTime() * Math.pow(10, extraDigits);\n    // 3 random digits\n    const extraPart = Math.floor(Math.random() * Math.pow(10, extraDigits));\n    // 16 digits\n    return datePart + extraPart;\n}\nexport function createResponse(error, result) {\n    return {\n        id: createRandomId(),\n        jsonrpc: '2.0',\n        error,\n        result,\n    };\n}\nexport class BitskiProviderShim {\n    constructor(loadSdk, options = {}) {\n        this.loadSdk = loadSdk;\n        this.options = options;\n    }\n    loadProvider() {\n        if (!this.providerPromise) {\n            this.providerPromise = this.loadSdk().then((sdk) => {\n                if (!sdk) {\n                    throw new Error('Bitski SDK not found');\n                }\n                return sdk.createProvider(this.options);\n            });\n        }\n        return this.providerPromise;\n    }\n    // TODO: Update types in v4 to use eth-provider-types\n    async request({ method, params = [] }) {\n        const provider = await this.loadProvider();\n        return provider.request({ method: method, params: params });\n    }\n    on(eventName, listener) {\n        this.loadProvider().then((provider) => provider.on(eventName, listener));\n    }\n    removeListener(eventName, listener) {\n        this.loadProvider().then((provider) => provider.removeListener(eventName, listener));\n    }\n    send(methodOrPayload, paramsOrCallback) {\n        if (typeof methodOrPayload !== 'string' && !Array.isArray(paramsOrCallback)) {\n            return this.sendAsync(methodOrPayload, paramsOrCallback);\n        }\n        return this.request({ method: methodOrPayload, params: paramsOrCallback })\n            .then((result) => {\n            return createResponse(undefined, result);\n        })\n            .catch((err) => {\n            return createResponse(err);\n        });\n    }\n    /**\n     * @deprecated Please use `.request` instead.\n     */\n    sendAsync(payload, callback) {\n        this.request(payload)\n            .then((response) => {\n            callback(null, createResponse(undefined, response));\n        })\n            .catch((err) => {\n            callback(err);\n        });\n    }\n    // method used externally to set provider\n    setNetwork(network) {\n        this.providerPromise = this.loadProvider().then(async (provider) => {\n            await provider.request({\n                method: EthMethod.wallet_addEthereumChain,\n                params: [\n                    {\n                        chainId: toHex(network.chainId),\n                        rpcUrls: [network.rpcUrl],\n                    },\n                ],\n            });\n            await provider.request({\n                method: EthMethod.wallet_switchEthereumChain,\n                params: [{ chainId: toHex(network.chainId) }],\n            });\n            return provider;\n        });\n    }\n    supportsSubscriptions() {\n        return true;\n    }\n    isConnected() {\n        return true;\n    }\n    /**\n     * @deprecated currentBlock is no longer exposed directly, use subscriptions or filters instead\n     */\n    get currentBlock() {\n        return undefined;\n    }\n    /**\n     * @deprecated call request with eth_subscribe directly instead\n     */\n    subscribe(_subscribeMethod, subscriptionMethod, params) {\n        console.warn('BitskiProvider#subscribe() is deprecated. It is no longer necessary to call this method.');\n        return Promise.resolve('');\n    }\n    /**\n     * @deprecated call request with eth_ussubscribe directly instead\n     */\n    unsubscribe(subscriptionId, _unsubscribeMethod) {\n        console.warn('BitskiProvider#unsubscribe() is deprecated. It is no longer necessary to call this method.');\n        return Promise.resolve(true);\n    }\n    /**\n     * @deprecated BitskiSDK is always running\n     */\n    isRunning() {\n        console.warn('BitskiProvider#isRunning() is deprecated. It is no longer necessary to call this method.');\n        return true;\n    }\n    /**\n     * @deprecated BitskiSDK does not need to be started anymore\n     */\n    start() {\n        console.warn('BitskiProvider#start() is deprecated. It is no longer necessary to call this method.');\n    }\n    /**\n     * @deprecated BitskiSDK does not need to be stopped anymore. Unsubscribe from all active\n     * subscriptions instead.\n     */\n    stop() {\n        console.warn('BitskiProvider#stop() is deprecated. It is no longer necessary to call this method.');\n    }\n    /**\n     * @deprecated BitskiSDK does not support custom providers anymore\n     */\n    addProvider(_source, _index) {\n        console.warn('BitskiProvider#addProvider() is deprecated. It is no longer necessary to call this method.');\n    }\n    /**\n     * @deprecated BitskiSDK does not support custom providers anymore\n     */\n    removeProvider(source) {\n        console.warn('BitskiProvider#removeProvider() is deprecated. It is no longer necessary to call this method.');\n    }\n}\n", "export function toHex(number) {\n    return `0x${number.toString(16)}`;\n}\n", "import { AuthorizationNotifier, AuthorizationRequest, AuthorizationServiceConfiguration, BaseTokenRequestHandler, FetchRequestor, GRANT_TYPE_AUTHORIZATION_CODE, GRANT_TYPE_REFRESH_TOKEN, RedirectRequestHandler, TokenRequest, } from '@openid/appauth';\nimport { BITSKI_USER_API_HOST, DEFAULT_OAUTH_CONFIGURATION, DEFAULT_OPTIONAL_SCOPES, DEFAULT_SCOPES, } from '../constants';\nimport { NoHashQueryStringUtils } from '../utils/no-hash-query-string-utils';\nimport { parseResponse } from '../utils/request-utils';\nimport { PopupBlockedError, PopupClosedError, PopupRequestHandler } from './popup-handler';\n// Use this constant in login_hint to indicate that the sign up UI should be displayed\nexport const LOGIN_HINT_SIGNUP = 'signup';\nexport const USER_CANCELLED_MESSAGE = 'Sign in request was cancelled.';\n/**\n * Responsible for submitting requests to our OAuth server.\n */\nexport class OAuthManager {\n    /**\n     * Create a new OAuth Manager\n     * @param options Settings object\n     * @param options.clientId string: The client id to use for various requests\n     * @param options.redirectUri string: The redirect URI to use for responding to auth requests\n     * @param options.configuration AuthorizationServiceConfiguration (optional): The configuration for the OAuth server\n     * @param options.additionalScopes string[] (optional): Additional scopes to request outside of openid.\n     * Default is offline. Pass an empty array to only request openid.\n     */\n    constructor(options) {\n        this.clientId = options.clientId;\n        this.redirectUri = options.redirectUri;\n        this.configuration =\n            options.configuration || new AuthorizationServiceConfiguration(DEFAULT_OAUTH_CONFIGURATION);\n        const additionalScopes = options.additionalScopes || DEFAULT_OPTIONAL_SCOPES;\n        this.scopes = DEFAULT_SCOPES.concat(additionalScopes);\n        this.tokenHandler = new BaseTokenRequestHandler(new FetchRequestor());\n        this.notifier = new AuthorizationNotifier();\n        this.notifier.setAuthorizationListener(this.didCompleteAuthorizationFlow.bind(this));\n    }\n    /**\n     * Trigger a popup sign in flow (the default)\n     */\n    signInPopup(opts) {\n        opts = opts || {};\n        const promise = new Promise((fulfill, reject) => {\n            this.pendingResolver = { fulfill, reject };\n        });\n        this.authHandler = new PopupRequestHandler();\n        this.authHandler.setAuthorizationNotifier(this.notifier);\n        const request = this.createAuthRequest(opts);\n        this.authHandler.performAuthorizationRequest(this.configuration, request);\n        return promise.then((response) => {\n            return this.requestAccessToken(response.code);\n        });\n    }\n    /**\n     * Trigger a redirect sign in flow. Promise should never fulfill, as you will be redirected.\n     */\n    signInRedirect(opts) {\n        opts = opts || {};\n        const promise = new Promise((fulfill, reject) => {\n            this.pendingResolver = { fulfill, reject };\n        });\n        this.authHandler = new RedirectRequestHandler(undefined, new NoHashQueryStringUtils());\n        this.authHandler.setAuthorizationNotifier(this.notifier);\n        const request = this.createAuthRequest(opts);\n        this.authHandler.performAuthorizationRequest(this.configuration, request);\n        // Since this method redirects the whole window, the promise will\n        // likely never complete unless we encounter an error.\n        return promise;\n    }\n    /**\n     * Attempt to finalize auth request from a redirect flow. Called from your redirect url once you've been\n     * redirected back.\n     */\n    redirectCallback() {\n        const promise = new Promise((fulfill, reject) => {\n            this.pendingResolver = { fulfill, reject };\n        });\n        this.authHandler = new RedirectRequestHandler(undefined, new NoHashQueryStringUtils());\n        this.authHandler.setAuthorizationNotifier(this.notifier);\n        this.authHandler.completeAuthorizationRequestIfPossible();\n        return promise.then((response) => {\n            return this.requestAccessToken(response.code);\n        });\n    }\n    /**\n     * Exchange an authorization code for an access token\n     * @param code The authorization code to exchange\n     */\n    requestAccessToken(code) {\n        const request = this.createTokenRequest(code);\n        return this.tokenHandler.performTokenRequest(this.configuration, request);\n    }\n    /**\n     * Request a new access token from a previous refresh token\n     * @param refreshToken The refresh token to use for authorization\n     */\n    refreshAccessToken(refreshToken) {\n        const request = this.createRefreshTokenRequest(refreshToken);\n        return this.tokenHandler.performTokenRequest(this.configuration, request);\n    }\n    /**\n     * Submit a sign out request on the oauth endpoint\n     * @param accessToken The access token to sign out with\n     */\n    requestSignOut(accessToken) {\n        return fetch(`${BITSKI_USER_API_HOST}/logout`, {\n            headers: {\n                Accept: 'application/json',\n                Authorization: `Bearer ${accessToken}`,\n                'Content-Type': 'application/json',\n            },\n            method: 'POST',\n        }).then((response) => {\n            return parseResponse(response);\n        });\n    }\n    /**\n     * Request a user's profile from the oauth server\n     * @param accessToken The access token for the user\n     */\n    requestUserInfo(accessToken) {\n        const userInfoEndpoint = this.configuration.userInfoEndpoint;\n        if (!userInfoEndpoint) {\n            return Promise.reject(new Error('Could not find user info endpoint'));\n        }\n        return fetch(userInfoEndpoint, {\n            headers: {\n                Accept: 'application/json',\n                Authorization: `Bearer ${accessToken}`,\n            },\n        }).then((response) => {\n            return parseResponse(response);\n        });\n    }\n    /**\n     * Internal callback from our Auth Request handler. Passes the response through to a cached promise if it exists.\n     * @param request The original auth request\n     * @param response The auth response if it was successful\n     * @param errorResponse The error response if it failed\n     */\n    didCompleteAuthorizationFlow(request, response, errorResponse) {\n        if (this.pendingResolver) {\n            if (response) {\n                this.pendingResolver.fulfill(response);\n                this.pendingResolver = undefined;\n            }\n            else if (errorResponse) {\n                if (errorResponse instanceof PopupClosedError) {\n                    this.pendingResolver.reject(new Error(USER_CANCELLED_MESSAGE));\n                }\n                else if (errorResponse instanceof PopupBlockedError) {\n                    // Parse domain of the authority, to log better context for error.\n                    const urlMatch = /^(http?s:\\/\\/[\\w.]*)\\/[\\w/]*$/;\n                    // Check for matches against the authority\n                    const matches = this.configuration.authorizationEndpoint.match(urlMatch);\n                    const baseUrl = matches && matches.length > 1 ? matches[1] : '';\n                    this.pendingResolver.reject(new Error(`The popup was blocked. Please make sure ${baseUrl} is allowed to open popups.`));\n                }\n                else {\n                    this.pendingResolver.reject(new Error(`Error from the server: ${errorResponse.error}`));\n                }\n                this.pendingResolver = undefined;\n            }\n        }\n    }\n    /**\n     * Factory method to create an auth request\n     */\n    createAuthRequest(opts) {\n        // Create base request\n        const request = new AuthorizationRequest({\n            client_id: this.clientId,\n            redirect_uri: this.redirectUri,\n            response_type: AuthorizationRequest.RESPONSE_TYPE_CODE,\n            scope: this.scopes.join(' '),\n        }, undefined, false);\n        // Pass options through\n        if (opts.login_hint) {\n            // Only assign extras if login_hint is included in the options\n            request.extras = { login_hint: opts.login_hint };\n        }\n        return request;\n    }\n    /**\n     * Factory method to create a token request with a refresh token\n     * @param refreshToken Refresh token to use\n     */\n    createRefreshTokenRequest(refreshToken) {\n        return new TokenRequest({\n            client_id: this.clientId,\n            grant_type: GRANT_TYPE_REFRESH_TOKEN,\n            redirect_uri: this.redirectUri,\n            refresh_token: refreshToken,\n        });\n    }\n    /**\n     * Factory method to create a token request with an auth code\n     * @param code The auth code to use\n     */\n    createTokenRequest(code) {\n        return new TokenRequest({\n            client_id: this.clientId,\n            code,\n            grant_type: GRANT_TYPE_AUTHORIZATION_CODE,\n            redirect_uri: this.redirectUri,\n        });\n    }\n}\n", "// SDK\nexport const SDK_VERSION = '0.14.1';\n// URLs\nexport const BITSKI_USER_API_HOST = 'https://www.bitski.com/v1';\nexport const BITSKI_TRANSACTION_API_BASE_URL = 'https://api.bitski.com/v1';\nexport const BITSKI_RPC_BASE_URL = 'https://api.bitski.com/v1/web3';\nexport const BITSKI_WEB_BASE_URL = 'https://sign.bitski.com';\nexport const IFRAME_MESSAGE_ORIGIN_INCLUDES = '.bitski.com';\n// OAuth\nexport const DEFAULT_OAUTH_CONFIGURATION = {\n    authorization_endpoint: 'https://account.bitski.com/oauth2/auth',\n    revocation_endpoint: '',\n    token_endpoint: 'https://account.bitski.com/oauth2/token',\n    userinfo_endpoint: 'https://account.bitski.com/userinfo',\n};\nexport const DEFAULT_SCOPES = ['openid']; // scopes that are always included\nexport const DEFAULT_OPTIONAL_SCOPES = ['offline']; // scopes that are included by default, but can be overridden\n// Popup Window\nexport const CHECK_FOR_POPUP_CLOSE_INTERVAL = 500;\nexport const DEFAULT_POPUP_FEATURES = {\n    location: 'no',\n    toolbar: 'no',\n    width: 500,\n    height: 500,\n    left: 100,\n    top: 100,\n};\n// Storage\nexport const REFRESH_TOKEN_KEY = 'bitski.refresh_token';\nexport const ACCESS_TOKEN_KEY = 'bitski.access_token';\nexport const ID_TOKEN_KEY = 'bitski.id_token';\nexport const USER_KEY = 'bitski.user';\n// Methods\nexport const CACHED_METHODS = ['eth_accounts'];\nexport const DEFAULT_AUTHORIZED_METHODS = [\n    'eth_sendTransaction',\n    'eth_signTransaction',\n    'eth_sign',\n    'personal_sign',\n    'eth_signTypedData',\n    'eth_signTypedData_v3',\n    'eth_signTypedData_v4',\n];\nexport var OAuthSignInMethod;\n(function (OAuthSignInMethod) {\n    OAuthSignInMethod[\"Redirect\"] = \"REDIRECT\";\n    OAuthSignInMethod[\"Popup\"] = \"POPUP\";\n    OAuthSignInMethod[\"Silent\"] = \"SILENT\";\n})(OAuthSignInMethod || (OAuthSignInMethod = {}));\nexport var AuthenticationStatus;\n(function (AuthenticationStatus) {\n    AuthenticationStatus[\"Connected\"] = \"CONNECTED\";\n    AuthenticationStatus[\"Expired\"] = \"EXPIRED\";\n    AuthenticationStatus[\"NotConnected\"] = \"NOT_CONNECTED\";\n})(AuthenticationStatus || (AuthenticationStatus = {}));\n", "import { BasicQueryStringUtils } from '@openid/appauth';\nexport class NoHashQueryStringUtils extends BasicQueryStringUtils {\n    parse(input, useHash) {\n        return super.parse(input, false /* never use hash */);\n    }\n}\n", "// tslint:disable max-classes-per-file\nimport { AuthorizationError, AuthorizationRequestHandler, AuthorizationResponse, BasicQueryStringUtils, DefaultCrypto, } from '@openid/appauth';\nimport { CHECK_FOR_POPUP_CLOSE_INTERVAL, DEFAULT_POPUP_FEATURES } from '../constants';\nimport { parseUrlParams } from '../utils/callback';\nimport { PopupValidator } from '../utils/popup-validator';\n// Intermediate errors, since AuthorizationRequestHandler must return an AuthorizationError instance.\n// These should not be user visible.\nexport class PopupClosedError extends AuthorizationError {\n    constructor() {\n        super({ error: 'The popup was dismissed.' });\n    }\n}\nexport class PopupBlockedError extends AuthorizationError {\n    constructor() {\n        super({ error: 'The popup was blocked.' });\n    }\n}\n// Create a popup feature string from an object with keys and values\nfunction createPopupFeatureString(features) {\n    // Convert to array of strings\n    const featuresArray = Object.keys(features).reduce((arr, key) => {\n        const value = features[key];\n        // convert to feature string format: top=100\n        arr.push(`${key}=${value}`);\n        return arr;\n    }, Array());\n    // Join strings with ',' and finish with ';'\n    return featuresArray.join(',') + ';';\n}\n// Returns a set of attributes for a centered popup based on\n// the default values from constants.ts\nfunction createCenteredPopupFeatures() {\n    const windowFeatures = DEFAULT_POPUP_FEATURES;\n    const w = windowFeatures.width;\n    const h = windowFeatures.height;\n    // Fixes dual-screen position\n    const dualScreenLeft = window.screenLeft || window.screenX;\n    const dualScreenTop = window.screenTop || window.screenY;\n    const windowWidth = window.innerWidth || document.documentElement.clientWidth || screen.width;\n    const windowHeight = window.innerHeight || document.documentElement.clientHeight || screen.height;\n    const left = windowWidth / 2 - w / 2;\n    const top = windowHeight / 2 - h / 2;\n    windowFeatures.left = left + dualScreenLeft;\n    windowFeatures.top = top + dualScreenTop;\n    return windowFeatures;\n}\nexport class PopupRequestHandler extends AuthorizationRequestHandler {\n    constructor(utils = new BasicQueryStringUtils(), crypto = new DefaultCrypto()) {\n        super(utils, crypto);\n        this.popupWindow = null;\n        this.isCancelled = false;\n        this.isBlocked = false;\n        // Watch for the popup being blocked\n        this.validator = new PopupValidator(() => {\n            // Return a specific error if blocked, so that we can handle it appropriately.\n            this.isBlocked = true;\n            this.completeAuthorizationRequestIfPossible();\n        });\n    }\n    performAuthorizationRequest(configuration, request) {\n        var _a, _b;\n        const url = this.buildRequestUrl(configuration, request);\n        this.pendingRequest = request;\n        this.id = request.state;\n        // Set a unique handler on the main window\n        window[`popupCallback_${request.state}`] = this.callback.bind(this);\n        // Start monitoring to see if the popup has been closed\n        this.closedTimer = window.setInterval(this.checkPopup.bind(this), CHECK_FOR_POPUP_CLOSE_INTERVAL);\n        // Create features for popup\n        const windowFeatures = createCenteredPopupFeatures();\n        // Create popup window\n        this.popupWindow = window.open(url, '_blank', createPopupFeatureString(windowFeatures));\n        // Check if the popup we just created was blocked.\n        this.validator.check(this.popupWindow);\n        // Focus the popup to bring it to the front\n        (_b = (_a = this.popupWindow) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    callback(url) {\n        this.responseUrl = url;\n        this.completeAuthorizationRequestIfPossible();\n    }\n    // Custom implementation to remove excess log spam\n    completeAuthorizationRequestIfPossible() {\n        return this.completeAuthorizationRequest().then((result) => {\n            if (result && this.notifier) {\n                this.notifier.onAuthorizationComplete(result.request, result.response, result.error);\n            }\n        });\n    }\n    completeAuthorizationRequest() {\n        const request = this.pendingRequest;\n        // Assert there is a pending request\n        if (!request) {\n            return Promise.resolve(null);\n        }\n        // Assert the request wasn't cancelled\n        if (this.isCancelled === true) {\n            return this.respondWithCancelled(request);\n        }\n        if (this.isBlocked === true) {\n            return this.respondWithBlocked(request);\n        }\n        // Assert there is no error\n        if (this.error) {\n            return this.respondWithError(request, this.error.message);\n        }\n        // Assert there is a response url to parse\n        if (!this.responseUrl) {\n            return Promise.resolve(null);\n        }\n        // Parse the url into data\n        const data = parseUrlParams(this.responseUrl);\n        // Extra the state\n        const state = data.state;\n        // Validate state is same as request\n        if (request.state !== state) {\n            return Promise.resolve(null);\n        }\n        // Check for an error response\n        const error = data.error;\n        if (error) {\n            // get additional optional info.\n            const errorUri = data.error_uri;\n            const errorDescription = data.error_description;\n            return this.respondWithError(request, error, errorDescription, errorUri);\n        }\n        // Respond with a code\n        const code = data.code;\n        return this.respondWithCode(request, code);\n    }\n    respondWithBlocked(request) {\n        const error = new PopupBlockedError();\n        const response = { request, error, response: null };\n        this.cleanup();\n        return Promise.resolve(response);\n    }\n    respondWithCancelled(request) {\n        const error = new PopupClosedError();\n        const response = { request, error, response: null };\n        this.cleanup();\n        return Promise.resolve(response);\n    }\n    respondWithError(request, errorMessage, errorDescription, errorUri) {\n        const error = new AuthorizationError({\n            error: errorMessage,\n            error_description: errorDescription,\n            error_uri: errorUri,\n            state: request.state,\n        });\n        const response = { request, error, response: null };\n        this.cleanup();\n        return Promise.resolve(response);\n    }\n    respondWithCode(request, code) {\n        let authorizationResponse = null;\n        if (code) {\n            authorizationResponse = new AuthorizationResponse({ code, state: request.state });\n        }\n        const response = { request, response: authorizationResponse, error: null };\n        this.cleanup();\n        return Promise.resolve(response);\n    }\n    cleanup() {\n        var _a, _b;\n        window.clearInterval(this.closedTimer);\n        delete window[`popupCallback_${this.id}`];\n        (_b = (_a = this.popupWindow) === null || _a === void 0 ? void 0 : _a.close) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.popupWindow = null;\n        this.pendingRequest = undefined;\n        this.error = undefined;\n        this.id = undefined;\n        this.responseUrl = undefined;\n    }\n    checkPopup() {\n        if (this.popupWindow && this.popupWindow.closed) {\n            // Stop checking\n            window.clearInterval(this.closedTimer);\n            this.isCancelled = true;\n            this.completeAuthorizationRequestIfPossible();\n        }\n    }\n}\n", "import { USER_CANCELLED_MESSAGE } from '../auth/oauth-manager';\nimport { OAuthSignInMethod } from '../constants';\n/**\n * Sizing options for the Bitski connect button.\n */\nexport var ConnectButtonSize;\n(function (ConnectButtonSize) {\n    ConnectButtonSize[\"Small\"] = \"SMALL\";\n    ConnectButtonSize[\"Medium\"] = \"MEDIUM\";\n    ConnectButtonSize[\"Large\"] = \"LARGE\";\n})(ConnectButtonSize || (ConnectButtonSize = {}));\n/**\n * A button used to connect to Bitski.\n */\nexport class ConnectButton {\n    /**\n     * @param authProvider An instance of an AuthProvider to process sign in requests.\n     * @param options Optional ConnectButtonOptions to configure your button.\n     * @param callback Optional callback to be called after successful or failed log in attempt.\n     * You can also set this directly later with the `callback` property.\n     */\n    constructor(loadSDK, options, callback, getProvider) {\n        this.getProvider = getProvider;\n        // Set options to object if undefined\n        options = options || {};\n        // Configure instance\n        this.loadSDK = loadSDK;\n        this.size = options.size || ConnectButtonSize.Medium;\n        this.authIntegrationType = options.authMethod || OAuthSignInMethod.Popup;\n        this.callback = callback;\n        this.signInOptions = options.signInOptions || {};\n        // Create the element\n        this.element = document.createElement('button');\n        this.configureElement();\n        this.element.addEventListener('click', this.signin.bind(this));\n        // Embed if needed\n        if (options.container) {\n            options.container.appendChild(this.element);\n        }\n    }\n    /**\n     * Removes the button from the page\n     */\n    remove() {\n        if (this.element.parentNode) {\n            this.element.parentNode.removeChild(this.element);\n        }\n    }\n    async signin() {\n        const sdk = await this.loadSDK();\n        if (sdk === null) {\n            throw new Error('Bitski SDK is not available');\n        }\n        try {\n            const user = await sdk.signInOrConnect(this.authIntegrationType, this.signInOptions);\n            if (this.getProvider) {\n                window.ethereum = this.getProvider();\n            }\n            if (this.callback) {\n                this.callback(undefined, user);\n            }\n        }\n        catch (error) {\n            // Check for cancellation\n            if (error instanceof Error && error.message === USER_CANCELLED_MESSAGE) {\n                // Not a real error, the user just cancelled. Trigger cancellation callback.\n                if (this.onCancel) {\n                    this.onCancel();\n                }\n            }\n            else if (this.callback) {\n                // Real error. Forward to main callback.\n                this.callback(error, undefined);\n            }\n        }\n    }\n    configureElement() {\n        this.element.title = 'Continue with Bitski';\n        this.element.innerText = 'Continue with Bitski';\n        this.element.className = 'bitski-connect-button';\n        let sizeClass = '';\n        switch (this.size) {\n            case ConnectButtonSize.Small:\n                sizeClass = 'size-small';\n                break;\n            case ConnectButtonSize.Medium:\n                sizeClass = 'size-medium';\n                break;\n            case ConnectButtonSize.Large:\n                sizeClass = 'size-large';\n                break;\n        }\n        this.element.classList.add(sizeClass);\n    }\n}\n", "export const Mainnet = {\n    chainId: 1,\n    rpcUrl: 'https://api.bitski.com/v1/web3/mainnet',\n};\nexport const Goerli = {\n    chainId: 5,\n    rpcUrl: 'https://api.bitski.com/v1/web3/goerli',\n};\nexport const Polygon = {\n    chainId: 137,\n    rpcUrl: 'https://api.bitski.com/v1/web3/polygon',\n};\nexport const Mumbai = {\n    chainId: 80001,\n    rpcUrl: 'https://api.bitski.com/v1/web3/mumbai',\n};\nexport const BinanceSmartChain = {\n    chainId: 56,\n    rpcUrl: 'https://api.bitski.com/v1/web3/bsc',\n};\nexport const BinanceSmartChainTestnet = {\n    chainId: 97,\n    rpcUrl: 'https://api.bitski.com/v1/web3/bnbt',\n};\n", "import { processCallback } from './-private/utils/callback';\nimport { loadScript } from './load';\nimport { BitskiProviderShim } from './provider-shim';\nimport { ConnectButton } from './-private/components/connect-button';\nimport { AuthenticationStatus, OAuthSignInMethod } from './-private/constants';\n// Import these directly so we don't load the whole provider bundle\nimport { BinanceSmartChain, BinanceSmartChainTestnet, Goerli, Mainnet, Mumbai, Polygon, } from './-private/network';\nexport { BinanceSmartChain, BinanceSmartChainTestnet, Mainnet, Goerli, Polygon, Mumbai, AuthenticationStatus, OAuthSignInMethod, };\nexport class Bitski {\n    /**\n     * @param clientId OAuth Client ID\n     * @param redirectUri Redirect uri, defaults to the current url. This should be the location of your callback html file.\n     * @param additionalScopes To use custom scopes, add them here. The default value is ['offline'].\n     * Note: Make sure your app is approved for the scopes you are requesting first.\n     * @param options Other OAuth settings. Don't change these unless you know what you are doing.\n     */\n    constructor(clientId, redirectUri, additionalScopes, options) {\n        this.clientId = clientId;\n        this.redirectUri = redirectUri;\n        this.additionalScopes = additionalScopes;\n        this.options = options;\n    }\n    /**\n     * Alternative to using our static callback.html file. Call this from your own redirect page.\n     */\n    static callback() {\n        processCallback();\n    }\n    /**\n     * Returns a new web3 provider for a given network.\n     * @param options options for the provider, or a network name\n     */\n    getProvider(options) {\n        var _a;\n        if (typeof window !== 'undefined' && ((_a = window.Bitski) === null || _a === void 0 ? void 0 : _a.getProvider)) {\n            return window.Bitski.getProvider(options);\n        }\n        const network = networkFromProviderOptions(options);\n        let provider = this.provider;\n        if (!provider) {\n            this.provider = provider = new BitskiProviderShim(() => this.loadSDK(), typeof options === 'string' ? undefined : options);\n        }\n        if (network) {\n            provider.setNetwork(network);\n        }\n        return provider;\n    }\n    /**\n     * Creates a sign in with bitski button to add to your app. If an HTML element is passed in as the\n     * first parameter, it will automatically add it to the DOM inside that element. Make sure to add\n     * a callback to get notified of login events.\n     * @param options {ConnectButtonOptions} Optional configuration for the button\n     * @param callback Post-login callback. Called when sign in is complete. Not applicable for redirect login method.\n     */\n    getConnectButton(options, callback) {\n        return new ConnectButton(() => this.loadSDK(), options, callback, () => this.getProvider());\n    }\n    /**\n     * Reinitalizes the SDK after the page has been reloaded, and bootstraps window.ethereum.\n     * This method should be called always, and immediately after the page loads.\n     */\n    async initialize() {\n        var _a, _b, _c;\n        const localStorageKeys = (await ((_c = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.store) === null || _b === void 0 ? void 0 : _b.keys) === null || _c === void 0 ? void 0 : _c.call(_b))) || Object.keys(localStorage);\n        if (!localStorageKeys.find((key) => key.startsWith('bitski'))) {\n            return;\n        }\n        await this.connect();\n        // bootstrap provider\n        this.bootstrapProvider();\n    }\n    /**\n     * Signs in or connects to bitski depending on the user's auth state.\n     * Since it may open a popup, this method must be called from user interaction handler,\n     * such as a click or tap handler.\n     * @param options Provide SignInOptions for the sign in request. See signIn() for more info.\n     */\n    start(options) {\n        return this.ensureSDK()\n            .then((sdk) => sdk.signInOrConnect(undefined, options))\n            .then((user) => {\n            this.bootstrapProvider();\n            return user;\n        });\n    }\n    /**\n     * Check the logged in state of the user\n     */\n    getAuthStatus() {\n        return this.ensureSDK().then((sdk) => sdk.getAuthStatus());\n    }\n    /**\n     * Starts the sign in flow. Will trigger a popup window over your app, so it must be called within a user interaction handler such as a click.\n     * @param options Optionally provide additional options for the sign in request.\n     *\n     * You can use the options parameter to request that we show the sign up form instead of the sign in form:\n     * ```javascript\n     * import { LOGIN_HINT_SIGNUP } from 'bitski';\n     *\n     * await bitski.signIn({ login_hint: LOGIN_HINT_SIGNUP });\n     * ```\n     */\n    signIn(options) {\n        return this.ensureSDK()\n            .then((sdk) => sdk.signIn(options))\n            .then((user) => {\n            this.bootstrapProvider();\n            return user;\n        });\n    }\n    /**\n     * Gets the current signed in user. Will reject if we are not signed in.\n     */\n    async getUser() {\n        return this.ensureSDK().then((sdk) => sdk.getUser());\n    }\n    /**\n     * Connects to bitski to get a valid access token if possible.\n     */\n    async connect() {\n        return this.ensureSDK().then((sdk) => sdk.connect());\n    }\n    /**\n     * Starts redirect sign in flow. This is an alternative flow to the popup that all takes place in the same browser window.\n     * @param options Optionally provide additional options for the sign in request. See signIn() for more info.\n     */\n    signInRedirect(options) {\n        this.ensureSDK().then((sdk) => sdk.signInRedirect(options));\n    }\n    /**\n     * Call from your oauth redirect page.\n     */\n    async redirectCallback() {\n        return this.ensureSDK()\n            .then((sdk) => sdk.redirectCallback())\n            .then((user) => {\n            this.bootstrapProvider();\n            return user;\n        });\n    }\n    /**\n     * Retrieves the current access token for the user, if logged in.\n     */\n    async getCurrentAccessToken() {\n        return this.ensureSDK().then((sdk) => sdk.getCurrentAccessToken());\n    }\n    /**\n     * Retrieves the current ID token for the user, if logged in.\n     */\n    getCurrentIdToken() {\n        return this.ensureSDK().then((sdk) => sdk.getCurrentIdToken());\n    }\n    /**\n     * Retrieves the current refresh token for the user, if logged in.\n     * Requires that the user has approved your application for offline access.\n     */\n    getCurrentRefreshToken() {\n        return this.ensureSDK().then((sdk) => sdk.getCurrentRefreshToken());\n    }\n    /**\n     * Register a callback to be called on sign out. This is a good practice,\n     * since there may be situations where you are signed out unexpectedly.\n     * @param fn Your callback function\n     */\n    addSignOutHandler(fn) {\n        return this.ensureSDK().then((sdk) => sdk.addSignOutHandler(fn));\n    }\n    /**\n     * Remove a registered signout callback\n     * @param fn Your callback function\n     */\n    removeSignOutHandler(fn) {\n        return this.ensureSDK().then((sdk) => sdk.removeSignOutHandler(fn));\n    }\n    /**\n     * Sign the current user out of your application.\n     */\n    signOut() {\n        return this.ensureSDK().then((sdk) => sdk.signOut());\n    }\n    bootstrapProvider() {\n        if (typeof window !== undefined) {\n            // bootstrap provider\n            window.ethereum = this.getProvider();\n        }\n    }\n    loadSDK() {\n        if (!this.sdk) {\n            this.sdk = loadScript().then((BitskiSDK) => {\n                return BitskiSDK\n                    ? new BitskiSDK(this.clientId, this.redirectUri, this.additionalScopes, this.options)\n                    : null;\n            });\n        }\n        return this.sdk;\n    }\n    async ensureSDK() {\n        const sdk = await this.loadSDK();\n        if (!sdk) {\n            throw new Error('Bitski SDK not available');\n        }\n        return sdk;\n    }\n}\n// Note: duplicated so we don't include the whole module\nexport const LOGIN_HINT_SIGNUP = 'signup';\nfunction networkFromName(networkName) {\n    switch (networkName) {\n        case '':\n        case 'mainnet':\n            return Mainnet;\n        case 'goerli':\n            return Goerli;\n        case 'polygon':\n            return Polygon;\n        case 'mumbai':\n            return Mumbai;\n        case 'bnb':\n            return BinanceSmartChain;\n        case 'bnbt':\n            return BinanceSmartChainTestnet;\n        default:\n            throw new Error(`Unsupported network name ${networkName}. Try passing a \\`network\\` in the options instead.`);\n    }\n}\nfunction networkFromProviderOptions(options) {\n    if (typeof options === 'string') {\n        return networkFromName(options);\n    }\n    if (options === null || options === void 0 ? void 0 : options.network) {\n        return options.network;\n    }\n    if (options === null || options === void 0 ? void 0 : options.networkName) {\n        return networkFromName(options.networkName);\n    }\n}\n"],
  "mappings": "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",
  "names": ["EthMethod", "EthBlockNumberTag", "EthProviderRpcErrorCode", "EthEvent", "EthProviderMessageType", "len", "i", "len2", "AppAuthError", "DefaultCrypto", "crypto", "AuthorizationRequest", "AuthorizationNotifier", "AuthorizationRequestHandler", "crypto", "AuthorizationResponse", "AuthorizationError", "Requestor", "JQueryRequestor", "FetchRequestor", "TestRequestor", "AuthorizationServiceConfiguration", "BasicQueryStringUtils", "StorageBackend", "LocalStorageBackend", "RedirectRequestHandler", "crypto", "RevokeTokenRequest", "TokenRequest", "TokenResponse", "TokenError", "BaseTokenRequestHandler", "import_appauth", "OAuthSignInMethod", "AuthenticationStatus", "import_appauth", "ConnectButtonSize"]
}
