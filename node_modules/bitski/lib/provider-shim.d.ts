import type { BitskiSDK, ProviderOptions } from './-private/sdk';
interface RequestArguments {
    method: string;
    params?: unknown[] | object;
}
interface BitskiWeb3Provider {
    currentBlock: undefined;
    supportsSubscriptions(): boolean;
    subscribe(subscribeMethod: string | undefined, subscriptionMethod: string, parameters: any[]): Promise<string>;
    unsubscribe(subscriptionId: string, unsubscribeMethod?: string): Promise<boolean>;
    isRunning(): boolean;
    start(): void;
    stop(): void;
    addProvider(source: unknown, index?: number): void;
    removeProvider(source: unknown): void;
}
export interface JSONRPCRequest {
    id?: number;
    jsonrpc?: string;
    method: string;
    params: any[];
    skipCache?: boolean;
    origin?: any;
}
export interface JSONRPCResponse {
    id: number;
    jsonrpc: string;
    error?: any;
    result?: any;
}
declare type JSONRPCResponseHandler = (error: null | Error, response?: JSONRPCResponse) => void;
export interface LegacySendProvider {
    send(payload: JSONRPCRequest, callback: JSONRPCResponseHandler): void;
    send(method: string, params: unknown[]): Promise<JSONRPCResponse>;
}
export interface LegacySendAsyncProvider {
    sendAsync(payload: JSONRPCRequest, callback: JSONRPCResponseHandler): void;
}
export interface EIP1193Provider {
    request(request: RequestArguments, requestOptions?: unknown): Promise<unknown>;
}
export declare function createResponse(error: unknown, result?: unknown): JSONRPCResponse;
export declare class BitskiProviderShim implements BitskiWeb3Provider, LegacySendAsyncProvider, LegacySendProvider, EIP1193Provider {
    private loadSdk;
    private options;
    private providerPromise;
    constructor(loadSdk: () => Promise<Pick<BitskiSDK, 'createProvider'> | null>, options?: ProviderOptions);
    private loadProvider;
    request({ method, params }: RequestArguments): Promise<unknown>;
    on(eventName: string, listener: (...args: unknown[]) => void): void;
    removeListener(eventName: string, listener: (...args: unknown[]) => void): void;
    /**
     * @deprecated Please use `.request` instead.
     */
    send(method: string, params: unknown[]): Promise<JSONRPCResponse>;
    send(payload: JSONRPCRequest, callback: JSONRPCResponseHandler): void;
    /**
     * @deprecated Please use `.request` instead.
     */
    sendAsync(payload: JSONRPCRequest, callback: JSONRPCResponseHandler): void;
    private setNetwork;
    supportsSubscriptions(): boolean;
    isConnected(): boolean;
    /**
     * @deprecated currentBlock is no longer exposed directly, use subscriptions or filters instead
     */
    get currentBlock(): undefined;
    /**
     * @deprecated call request with eth_subscribe directly instead
     */
    subscribe(_subscribeMethod: string | undefined, subscriptionMethod: string, params: any): Promise<string>;
    /**
     * @deprecated call request with eth_ussubscribe directly instead
     */
    unsubscribe(subscriptionId: string, _unsubscribeMethod: string | undefined): Promise<boolean>;
    /**
     * @deprecated BitskiSDK is always running
     */
    isRunning(): boolean;
    /**
     * @deprecated BitskiSDK does not need to be started anymore
     */
    start(): void;
    /**
     * @deprecated BitskiSDK does not need to be stopped anymore. Unsubscribe from all active
     * subscriptions instead.
     */
    stop(): void;
    /**
     * @deprecated BitskiSDK does not support custom providers anymore
     */
    addProvider(_source: unknown, _index?: number): void;
    /**
     * @deprecated BitskiSDK does not support custom providers anymore
     */
    removeProvider(source: unknown): void;
}
export {};
