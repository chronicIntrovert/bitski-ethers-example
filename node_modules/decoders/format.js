'use strict'

exports.__esModule = true
exports.formatInline = formatInline
exports.formatShort = formatShort
exports.serializeAnnotation = serializeAnnotation
exports.serializeValue = serializeValue

var _utils = require('./_utils')

function serializeString(s, width) {
  if (width === void 0) {
    width = 80
  }
  var ser = JSON.stringify(s)

  if (ser.length <= width) {
    return ser
  }

  var truncated = s.substring(0, width - 15) + '...'
  ser = JSON.stringify(truncated) + ' [truncated]'
  return ser
}

function serializeArray(annotation, prefix) {
  var items = annotation.items

  if (items.length === 0) {
    return '[]'
  }

  var result = []
  items.forEach(function (item) {
    var _serializeAnnotation = serializeAnnotation(item, '' + prefix + _utils.INDENT),
      ser = _serializeAnnotation[0],
      ann = _serializeAnnotation[1]

    result.push('' + prefix + _utils.INDENT + ser + ',')

    if (ann !== undefined) {
      result.push((0, _utils.indent)(ann, '' + prefix + _utils.INDENT))
    }
  })
  return ['['].concat(result, [prefix + ']']).join('\n')
}

function serializeObject(annotation, prefix) {
  var fields = annotation.fields
  var fieldNames = Object.keys(fields)

  if (fieldNames.length === 0) {
    return '{}'
  }

  var result = []
  fieldNames.forEach(function (key) {
    var valueAnnotation = fields[key]
    var kser = serializeValue(key)
    var valPrefix = '' + prefix + _utils.INDENT + ' '.repeat(kser.length + 2)

    var _serializeAnnotation2 = serializeAnnotation(valueAnnotation, '' + prefix + _utils.INDENT),
      vser = _serializeAnnotation2[0],
      vann = _serializeAnnotation2[1]

    result.push('' + prefix + _utils.INDENT + kser + ': ' + vser + ',')

    if (vann !== undefined) {
      result.push((0, _utils.indent)(vann, valPrefix))
    }
  })
  return ['{'].concat(result, [prefix + '}']).join('\n')
}

function serializeValue(value) {
  if (typeof value === 'string') {
    return serializeString(value)
  } else if (typeof value === 'number' || typeof value === 'boolean') {
    return value.toString()
  } else if (value === null) {
    return 'null'
  } else if (value === undefined) {
    return 'undefined'
  } else {
    var valueAsDate = (0, _utils.asDate)(value)

    if (valueAsDate !== null) {
      return 'new Date(' + JSON.stringify(valueAsDate.toISOString()) + ')'
    } else if (value instanceof Date) {
      return '(Invalid Date)'
    } else {
      return '(unserializable)'
    }
  }
}

function serializeAnnotation(ann, prefix) {
  if (prefix === void 0) {
    prefix = ''
  }
  var serialized

  if (ann.type === 'array') {
    serialized = serializeArray(ann, prefix)
  } else if (ann.type === 'object') {
    serialized = serializeObject(ann, prefix)
  } else if (ann.type === 'function') {
    serialized = '<function>'
  } else if (ann.type === 'circular-ref') {
    serialized = '<circular ref>'
  } else if (ann.type === 'unknown') {
    serialized = '???'
  } else {
    serialized = serializeValue(ann.value)
  }

  var text = ann.text

  if (text !== undefined) {
    var sep = '^'.repeat((0, _utils.isMultiline)(serialized) ? 1 : serialized.length)
    return [serialized, [sep, text].join((0, _utils.isMultiline)(text) ? '\n' : ' ')]
  } else {
    return [serialized, undefined]
  }
}

function formatInline(ann) {
  var _serializeAnnotation3 = serializeAnnotation(ann),
    serialized = _serializeAnnotation3[0],
    annotation = _serializeAnnotation3[1]

  if (annotation !== undefined) {
    return serialized + '\n' + annotation
  } else {
    return serialized
  }
}

function formatShort(ann) {
  return (0, _utils.summarize)(ann, []).join('\n')
}
