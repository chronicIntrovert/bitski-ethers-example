function _extends() {
  _extends = Object.assign
    ? Object.assign.bind()
    : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i]
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key]
            }
          }
        }
        return target
      }
  return _extends.apply(this, arguments)
}

var _register = new WeakSet()

function brand(ann) {
  _register.add(ann)

  return ann
}

export function object(fields, text) {
  return brand({
    type: 'object',
    fields: fields,
    text: text,
  })
}
export function array(items, text) {
  return brand({
    type: 'array',
    items: items,
    text: text,
  })
}
export function func(text) {
  return brand({
    type: 'function',
    text: text,
  })
}
export function unknown(value, text) {
  return brand({
    type: 'unknown',
    value: value,
    text: text,
  })
}
export function scalar(value, text) {
  return brand({
    type: 'scalar',
    value: value,
    text: text,
  })
}
export function circularRef(text) {
  return brand({
    type: 'circular-ref',
    text: text,
  })
}

export function updateText(annotation, text) {
  if (text !== undefined) {
    return brand(
      _extends({}, annotation, {
        text: text,
      })
    )
  } else {
    return annotation
  }
}

export function merge(objAnnotation, fields) {
  var newFields = _extends({}, objAnnotation.fields, fields)

  return object(newFields, objAnnotation.text)
}
export function asAnnotation(thing) {
  return typeof thing === 'object' && thing !== null && _register.has(thing) ? thing : undefined
}

function annotateArray(value, text, seen) {
  seen.add(value)
  var items = value.map(function (v) {
    return annotate(v, undefined, seen)
  })
  return array(items, text)
}

function annotateObject(obj, text, seen) {
  seen.add(obj)
  var fields = {}
  Object.keys(obj).forEach(function (key) {
    var value = obj[key]
    fields[key] = annotate(value, undefined, seen)
  })
  return object(fields, text)
}

function annotate(value, text, seen) {
  if (value === null || value === undefined || typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean' || typeof value === 'symbol' || typeof value.getMonth === 'function') {
    return scalar(value, text)
  }

  var ann = asAnnotation(value)

  if (ann) {
    return updateText(ann, text)
  }

  if (Array.isArray(value)) {
    if (seen.has(value)) {
      return circularRef(text)
    } else {
      return annotateArray(value, text, seen)
    }
  }

  if (typeof value === 'object') {
    if (seen.has(value)) {
      return circularRef(text)
    } else {
      return annotateObject(value, text, seen)
    }
  }

  if (typeof value === 'function') {
    return func(text)
  }

  return unknown(value, text)
}

function public_annotate(value, text) {
  return annotate(value, text, new WeakSet())
}

function public_annotateObject(obj, text) {
  return annotateObject(obj, text, new WeakSet())
}

export { public_annotate as annotate, public_annotateObject as annotateObject, annotate as __private_annotate }
