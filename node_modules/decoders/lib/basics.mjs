import { define } from '../Decoder.mjs'
import { either } from './unions.mjs'

export var null_ = define(function (blob, ok, err) {
  return blob === null ? ok(blob) : err('Must be null')
})

export var undefined_ = define(function (blob, ok, err) {
  return blob === undefined ? ok(blob) : err('Must be undefined')
})
var undefined_or_null = define(function (blob, ok, err) {
  return blob === undefined || blob === null ? ok(blob) : err('Must be undefined or null')
})

function _maybeish(emptyCase) {
  function _inner(decoder) {
    var rv = either(emptyCase, decoder)

    if (arguments.length >= 2) {
      var _defaultValue = arguments[1]

      var _defaultValue2 = typeof _defaultValue === 'function' ? _defaultValue() : _defaultValue

      return rv.transform(function (value) {
        return value != null ? value : _defaultValue2
      })
    } else {
      return rv
    }
  }

  return _inner
}

export var nullable = _maybeish(null_)

export var optional = _maybeish(undefined_)

export var maybe = _maybeish(undefined_or_null)

export function constant(value) {
  return define(function (blob, ok, err) {
    return blob === value ? ok(value) : err('Must be constant ' + String(value))
  })
}

export function always(value) {
  return define(
    typeof value === 'function'
      ? function (
          blob,

          ok,
          _
        ) {
          return ok(value())
        }
      : function (
          blob,

          ok,
          _
        ) {
          return ok(value)
        }
  )
}

export var hardcoded = always

export var unknown = define(function (blob, ok, _) {
  return ok(blob)
})

export var mixed = unknown
