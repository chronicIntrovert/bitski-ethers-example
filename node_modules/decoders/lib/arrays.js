'use strict'

exports.__esModule = true
exports.array = array
exports.nonEmptyArray = nonEmptyArray
exports.poja = void 0
exports.set = set
exports.tuple = void 0

var _annotate = require('../annotate')

var _Decoder = require('../Decoder')

var poja = (0, _Decoder.define)(function (blob, ok, err) {
  if (!Array.isArray(blob)) {
    return err('Must be an array')
  }

  return ok(blob.slice())
})

exports.poja = poja

function all(items, blobs, ok, err) {
  var results = []

  for (var index = 0; index < items.length; ++index) {
    var result = items[index]

    if (result.ok) {
      results.push(result.value)
    } else {
      var ann = result.error

      var clone = [].concat(blobs)
      clone.splice(index, 1, (0, _annotate.annotate)(ann, ann.text ? ann.text + ' (at index ' + index + ')' : 'index ' + index))
      return err((0, _annotate.annotate)(clone))
    }
  }

  return ok(results)
}

function array(decoder) {
  return poja.then(function (blobs, ok, err) {
    var results = blobs.map(decoder.decode)
    return all(results, blobs, ok, err)
  })
}

function nonEmptyArray(decoder) {
  return array(decoder).refine(function (arr) {
    return arr.length > 0
  }, 'Must be non-empty array')
}

function set(decoder) {
  return array(decoder).transform(function (items) {
    return new Set(items)
  })
}

var ntuple = function ntuple(n) {
  return poja.refine(function (arr) {
    return arr.length === n
  }, 'Must be a ' + n + '-tuple')
}

function _tuple() {
  for (var _len = arguments.length, decoders = new Array(_len), _key = 0; _key < _len; _key++) {
    decoders[_key] = arguments[_key]
  }

  return ntuple(decoders.length).then(function (blobs, ok, err) {
    var allOk = true
    var rvs = decoders.map(function (decoder, i) {
      var blob = blobs[i]
      var result = decoder.decode(blob)

      if (result.ok) {
        return result.value
      } else {
        allOk = false
        return result.error
      }
    })

    if (allOk) {
      return ok(rvs)
    } else {
      return err((0, _annotate.annotate)(rvs))
    }
  })
}

var tuple = _tuple
exports.tuple = tuple
