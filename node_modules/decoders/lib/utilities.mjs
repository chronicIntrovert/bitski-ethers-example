import { annotate } from '../annotate.mjs'
import { define } from '../Decoder.mjs'

export function instanceOf(klass) {
  return define(function (blob, ok, err) {
    return blob instanceof klass ? ok(blob) : err('Must be ' + klass.name + ' instance')
  })
}

export function lazy(decoderFn) {
  return define(function (blob) {
    return decoderFn().decode(blob)
  })
}

export function prep(mapperFn, decoder) {
  return define(function (originalInput, _, err) {
    var blob

    try {
      blob = mapperFn(originalInput)
    } catch (e) {
      return err(annotate(originalInput, e.message))
    }

    var r = decoder.decode(blob)
    return r.ok ? r : err(annotate(originalInput, r.error.text))
  })
}

export function never(msg) {
  return define(function (_, __, err) {
    return err(msg)
  })
}

export var fail = never
