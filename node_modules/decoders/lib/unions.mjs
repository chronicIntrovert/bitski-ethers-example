import { define } from '../Decoder.mjs'
import { indent, summarize } from '../_utils.mjs'
import { object } from './objects.mjs'
import { prep } from './utilities.mjs'
var EITHER_PREFIX = 'Either:\n'

function itemize(s) {
  return '-' + indent(s).substring(1)
}

function nest(errText) {
  return errText.startsWith(EITHER_PREFIX) ? errText.substr(EITHER_PREFIX.length) : itemize(errText)
}

function _either() {
  for (var _len = arguments.length, decoders = new Array(_len), _key = 0; _key < _len; _key++) {
    decoders[_key] = arguments[_key]
  }

  if (decoders.length === 0) {
    throw new Error('Pass at least one decoder to either()')
  }

  return define(function (blob, _, err) {
    var errors = []

    for (var _i = 0; _i < decoders.length; _i++) {
      var result = decoders[_i].decode(blob)

      if (result.ok) {
        return result
      } else {
        errors.push(result.error)
      }
    }

    var text =
      EITHER_PREFIX +
      errors
        .map(function (err) {
          return nest(summarize(err).join('\n'))
        })
        .join('\n')
    return err(text)
  })
}

export var either = _either

export function oneOf(constants) {
  return define(function (blob, ok, err) {
    var winner = constants.find(function (c) {
      return c === blob
    })

    if (winner !== undefined) {
      return ok(winner)
    }

    return err(
      'Must be one of ' +
        constants
          .map(function (value) {
            return JSON.stringify(value)
          })
          .join(', ')
    )
  })
}

export function taggedUnion(field, mapping) {
  var _object

  var base = object(((_object = {}), (_object[field] = prep(String, oneOf(Object.keys(mapping)))), _object)).transform(function (o) {
    return o[field]
  })
  return base.peek_UNSTABLE(function (_ref) {
    var blob = _ref[0],
      key = _ref[1]
    var decoder = mapping[key]
    return decoder.decode(blob)
  })
}
