export var INDENT = '  '

export function subtract(xs, ys) {
  var result = new Set()
  xs.forEach(function (x) {
    if (!ys.has(x)) {
      result.add(x)
    }
  })
  return result
}

export function asDate(value) {
  return !!value && Object.prototype.toString.call(value) === '[object Date]' && !isNaN(value) ? value : null
}
export function isMultiline(s) {
  return s.indexOf('\n') >= 0
}
export function indent(s, prefix) {
  if (prefix === void 0) {
    prefix = INDENT
  }

  if (isMultiline(s)) {
    return s
      .split('\n')
      .map(function (line) {
        return '' + prefix + line
      })
      .join('\n')
  } else {
    return '' + prefix + s
  }
}

export function summarize(ann, keypath) {
  if (keypath === void 0) {
    keypath = []
  }

  var result = []

  if (ann.type === 'array') {
    var items = ann.items
    var index = 0
    items.forEach(function (ann) {
      summarize(ann, [].concat(keypath, [index++])).forEach(function (item) {
        return result.push(item)
      })
    })
  } else if (ann.type === 'object') {
    var fields = ann.fields
    Object.keys(fields).forEach(function (key) {
      var value = fields[key]
      summarize(value, [].concat(keypath, [key])).forEach(function (item) {
        return result.push(item)
      })
    })
  }

  var text = ann.text

  if (!text) {
    return result
  }

  var prefix

  if (keypath.length === 0) {
    prefix = ''
  } else if (keypath.length === 1) {
    prefix = typeof keypath[0] === 'number' ? 'Value at index ' + keypath[0] + ': ' : 'Value at key ' + JSON.stringify(keypath[0]) + ': '
  } else {
    prefix = 'Value at keypath ' + keypath.map(String).join('.') + ': '
  }

  return [].concat(result, ['' + prefix + text])
}
