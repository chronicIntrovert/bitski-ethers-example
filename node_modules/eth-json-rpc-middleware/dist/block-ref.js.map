{"version":3,"file":"block-ref.js","sourceRoot":"","sources":["../src/block-ref.ts"],"names":[],"mappings":";;;;;;AACA,qDAIyB;AACzB,kDAA0B;AAC1B,gDAAwB;AACxB,mDAAoE;AACpE,yCAAmD;AAQnD,MAAM,GAAG,GAAG,kCAAkB,CAAC,6BAAa,EAAE,WAAW,CAAC,CAAC;AAE3D,SAAgB,wBAAwB,CAAC,EACvC,QAAQ,EACR,YAAY,MACiB,EAAE;IAC/B,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,KAAK,CAAC,8DAA8D,CAAC,CAAC;KAC7E;IAED,IAAI,CAAC,YAAY,EAAE;QACjB,MAAM,KAAK,CACT,kEAAkE,CACnE,CAAC;KACH;IAED,OAAO,uCAAqB,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;;QACpD,MAAM,aAAa,GAAG,0BAAkB,CAAC,GAAG,CAAC,CAAC;QAE9C,2CAA2C;QAC3C,IAAI,aAAa,KAAK,SAAS,EAAE;YAC/B,OAAO,IAAI,EAAE,CAAC;SACf;QAED,MAAM,QAAQ,GAAG,MAAA,MAAA,GAAG,CAAC,MAAM,0CAAG,aAAa,CAAC,mCAAI,QAAQ,CAAC;QAEzD,uBAAuB;QACvB,IAAI,QAAQ,KAAK,QAAQ,EAAE;YACzB,GAAG,CAAC,oDAAoD,CAAC,CAAC;YAC1D,OAAO,IAAI,EAAE,CAAC;SACf;QAED,sBAAsB;QACtB,MAAM,iBAAiB,GAAG,MAAM,YAAY,CAAC,cAAc,EAAE,CAAC;QAC9D,GAAG,CACD,uCAAuC,aAAa,oBAAoB,iBAAiB,EAAE,CAC5F,CAAC;QAEF,+CAA+C;QAC/C,MAAM,YAAY,GAAG,eAAK,CAAC,GAAG,CAAC,CAAC;QAEhC,IAAI,YAAY,CAAC,MAAM,EAAE;YACvB,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,iBAAiB,CAAC;SACxD;QAED,wBAAwB;QACxB,GAAG,CAAC,+BAA+B,EAAE,YAAY,CAAC,CAAC;QACnD,MAAM,QAAQ,GAAkC,MAAM,cAAI,CACvD,QAAqC,CAAC,SAAS,CACjD,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QAC/B,6CAA6C;QAC7C,GAAG,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QAC7B,GAAG,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QAE3B,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC,CAAC;AACL,CAAC;AAtDD,4DAsDC","sourcesContent":["import { PollingBlockTracker } from 'eth-block-tracker';\nimport {\n  createAsyncMiddleware,\n  JsonRpcMiddleware,\n  PendingJsonRpcResponse,\n} from 'json-rpc-engine';\nimport clone from 'clone';\nimport pify from 'pify';\nimport { projectLogger, createModuleLogger } from './logging-utils';\nimport { blockTagParamIndex } from './utils/cache';\nimport type { Block, SafeEventEmitterProvider } from './types';\n\ninterface BlockRefMiddlewareOptions {\n  blockTracker?: PollingBlockTracker;\n  provider?: SafeEventEmitterProvider;\n}\n\nconst log = createModuleLogger(projectLogger, 'block-ref');\n\nexport function createBlockRefMiddleware({\n  provider,\n  blockTracker,\n}: BlockRefMiddlewareOptions = {}): JsonRpcMiddleware<string[], Block> {\n  if (!provider) {\n    throw Error('BlockRefMiddleware - mandatory \"provider\" option is missing.');\n  }\n\n  if (!blockTracker) {\n    throw Error(\n      'BlockRefMiddleware - mandatory \"blockTracker\" option is missing.',\n    );\n  }\n\n  return createAsyncMiddleware(async (req, res, next) => {\n    const blockRefIndex = blockTagParamIndex(req);\n\n    // skip if method does not include blockRef\n    if (blockRefIndex === undefined) {\n      return next();\n    }\n\n    const blockRef = req.params?.[blockRefIndex] ?? 'latest';\n\n    // skip if not \"latest\"\n    if (blockRef !== 'latest') {\n      log('blockRef is not \"latest\", carrying request forward');\n      return next();\n    }\n\n    // lookup latest block\n    const latestBlockNumber = await blockTracker.getLatestBlock();\n    log(\n      `blockRef is \"latest\", setting param ${blockRefIndex} to latest block ${latestBlockNumber}`,\n    );\n\n    // create child request with specific block-ref\n    const childRequest = clone(req);\n\n    if (childRequest.params) {\n      childRequest.params[blockRefIndex] = latestBlockNumber;\n    }\n\n    // perform child request\n    log('Performing another request %o', childRequest);\n    const childRes: PendingJsonRpcResponse<Block> = await pify(\n      (provider as SafeEventEmitterProvider).sendAsync,\n    ).call(provider, childRequest);\n    // copy child response onto original response\n    res.result = childRes.result;\n    res.error = childRes.error;\n\n    return undefined;\n  });\n}\n"]}